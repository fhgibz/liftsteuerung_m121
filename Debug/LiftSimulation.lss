
LiftSimulation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e50  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003a  00800060  00000e50  00000ee4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000e8  0080009a  0080009a  00000f1e  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  00000f1e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000f80  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000238  00000000  00000000  00000fbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002fbc  00000000  00000000  000011f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010a5  00000000  00000000  000041b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000132b  00000000  00000000  00005255  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000618  00000000  00000000  00006580  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000115a  00000000  00000000  00006b98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000159d  00000000  00000000  00007cf2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d8  00000000  00000000  0000928f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 a8 05 	jmp	0xb50	; 0xb50 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 12 06 	jmp	0xc24	; 0xc24 <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 b9 06 	jmp	0xd72	; 0xd72 <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 dc 05 	jmp	0xbb8	; 0xbb8 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e5       	ldi	r30, 0x50	; 80
  68:	fe e0       	ldi	r31, 0x0E	; 14
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 39       	cpi	r26, 0x9A	; 154
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	aa e9       	ldi	r26, 0x9A	; 154
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 38       	cpi	r26, 0x82	; 130
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 26 07 	jmp	0xe4c	; 0xe4c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:



int main(void)
{
    InitializePorts();
  92:	0e 94 97 03 	call	0x72e	; 0x72e <InitializePorts>
	Usart_Init();
  96:	0e 94 8e 03 	call	0x71c	; 0x71c <Usart_Init>
	RegisterTestHandler( TestFunction );
  9a:	8e e6       	ldi	r24, 0x6E	; 110
  9c:	92 e0       	ldi	r25, 0x02	; 2
  9e:	0e 94 89 03 	call	0x712	; 0x712 <RegisterTestHandler>
	RegisterFsm(&_motorCtrl.fsm);
  a2:	88 e6       	ldi	r24, 0x68	; 104
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	0e 94 a8 02 	call	0x550	; 0x550 <RegisterFsm>
	RegisterFsm(&_mainCtrl.fsm);
  aa:	80 e6       	ldi	r24, 0x60	; 96
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	0e 94 a8 02 	call	0x550	; 0x550 <RegisterFsm>
	registerScheduler();
  b2:	0e 94 ff 01 	call	0x3fe	; 0x3fe <registerScheduler>
	// letzte Funktion die aufgerufen wird!
	EnableStatusUpdate = true;
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <EnableStatusUpdate>
	InitializeStart();
  bc:	0e 94 75 05 	call	0xaea	; 0xaea <InitializeStart>
}
  c0:	80 e0       	ldi	r24, 0x00	; 0
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	08 95       	ret

000000c6 <SysState_Initializing>:
	.fsm = {.Next = 0, .RxMask = 0xFF, .CurrentState = SysState_Initializing},
	
};

void SysState_Initializing(Message* msg){
	if(msg->Id == LiftStarted){
  c6:	fc 01       	movw	r30, r24
  c8:	81 81       	ldd	r24, Z+1	; 0x01
  ca:	81 3c       	cpi	r24, 0xC1	; 193
  cc:	f1 f4       	brne	.+60     	; 0x10a <SysState_Initializing+0x44>
		ClrIndicatorElevatorState(Floor0);
  ce:	80 e0       	ldi	r24, 0x00	; 0
  d0:	0e 94 78 03 	call	0x6f0	; 0x6f0 <ClrIndicatorElevatorState>
		ClrIndicatorElevatorState(Floor1);
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	0e 94 78 03 	call	0x6f0	; 0x6f0 <ClrIndicatorElevatorState>
		ClrIndicatorElevatorState(Floor2);
  da:	82 e0       	ldi	r24, 0x02	; 2
  dc:	0e 94 78 03 	call	0x6f0	; 0x6f0 <ClrIndicatorElevatorState>
		ClrIndicatorElevatorState(Floor3);
  e0:	83 e0       	ldi	r24, 0x03	; 3
  e2:	0e 94 78 03 	call	0x6f0	; 0x6f0 <ClrIndicatorElevatorState>
		
		ClrIndicatorFloorState(Floor0);
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	0e 94 66 03 	call	0x6cc	; 0x6cc <ClrIndicatorFloorState>
		ClrIndicatorFloorState(Floor1);
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	0e 94 66 03 	call	0x6cc	; 0x6cc <ClrIndicatorFloorState>
		ClrIndicatorFloorState(Floor2);
  f2:	82 e0       	ldi	r24, 0x02	; 2
  f4:	0e 94 66 03 	call	0x6cc	; 0x6cc <ClrIndicatorFloorState>
		ClrIndicatorFloorState(Floor3);
  f8:	83 e0       	ldi	r24, 0x03	; 3
  fa:	0e 94 66 03 	call	0x6cc	; 0x6cc <ClrIndicatorFloorState>
		
		SetState(&_mainCtrl.fsm, MainCtrl_Initializing);
  fe:	66 e8       	ldi	r22, 0x86	; 134
 100:	70 e0       	ldi	r23, 0x00	; 0
 102:	80 e6       	ldi	r24, 0x60	; 96
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	0e 94 98 02 	call	0x530	; 0x530 <SetState>
 10a:	08 95       	ret

0000010c <MainCtrl_Initializing>:
	}
}

void MainCtrl_Initializing(Message* msg)
{
 10c:	cf 93       	push	r28
 10e:	df 93       	push	r29
 110:	ec 01       	movw	r28, r24
	Usart_PutChar(0x02);
 112:	82 e0       	ldi	r24, 0x02	; 2
 114:	0e 94 a5 03 	call	0x74a	; 0x74a <Usart_PutChar>
	Usart_PutChar(msg->Id);
 118:	89 81       	ldd	r24, Y+1	; 0x01
 11a:	0e 94 a5 03 	call	0x74a	; 0x74a <Usart_PutChar>
	if( msg->Id == LiftCalibrated)
 11e:	89 81       	ldd	r24, Y+1	; 0x01
 120:	82 3c       	cpi	r24, 0xC2	; 194
 122:	71 f4       	brne	.+28     	; 0x140 <MainCtrl_Initializing+0x34>
	{
		_mainCtrl.currentFloor = Floor0;
 124:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <__DATA_REGION_ORIGIN__+0x5>
		SetState(&_mainCtrl.fsm, MainCtrl_CheckingScheduler);
 128:	63 ea       	ldi	r22, 0xA3	; 163
 12a:	70 e0       	ldi	r23, 0x00	; 0
 12c:	80 e6       	ldi	r24, 0x60	; 96
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	0e 94 98 02 	call	0x530	; 0x530 <SetState>
		SendEvent(SignalSourceApp, Message_ElevatorReady, 0 , 0);
 134:	20 e0       	ldi	r18, 0x00	; 0
 136:	40 e0       	ldi	r20, 0x00	; 0
 138:	63 e0       	ldi	r22, 0x03	; 3
 13a:	80 e2       	ldi	r24, 0x20	; 32
 13c:	0e 94 a9 03 	call	0x752	; 0x752 <SendEvent>
		return;
	}
}
 140:	df 91       	pop	r29
 142:	cf 91       	pop	r28
 144:	08 95       	ret

00000146 <MainCtrl_CheckingScheduler>:

void MainCtrl_CheckingScheduler(Message* msg){
 146:	cf 93       	push	r28
 148:	df 93       	push	r29
 14a:	ec 01       	movw	r28, r24
		Usart_PutChar(0x03);
 14c:	83 e0       	ldi	r24, 0x03	; 3
 14e:	0e 94 a5 03 	call	0x74a	; 0x74a <Usart_PutChar>
		Usart_PutChar(msg->Id);
 152:	89 81       	ldd	r24, Y+1	; 0x01
 154:	0e 94 a5 03 	call	0x74a	; 0x74a <Usart_PutChar>
	if( msg->Id == Message_ElevatorReady || msg->Id == TimerEvent)
 158:	89 81       	ldd	r24, Y+1	; 0x01
 15a:	83 30       	cpi	r24, 0x03	; 3
 15c:	11 f0       	breq	.+4      	; 0x162 <MainCtrl_CheckingScheduler+0x1c>
 15e:	88 3c       	cpi	r24, 0xC8	; 200
 160:	69 f4       	brne	.+26     	; 0x17c <MainCtrl_CheckingScheduler+0x36>
	{
		Usart_PutChar(0x01);
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	0e 94 a5 03 	call	0x74a	; 0x74a <Usart_PutChar>
		Usart_PutChar(msg->Id);
 168:	89 81       	ldd	r24, Y+1	; 0x01
 16a:	0e 94 a5 03 	call	0x74a	; 0x74a <Usart_PutChar>
		SendEvent(SignalSourceApp, GetNextFloor, 0 ,_mainCtrl.currentFloor);
 16e:	20 91 65 00 	lds	r18, 0x0065	; 0x800065 <__DATA_REGION_ORIGIN__+0x5>
 172:	40 e0       	ldi	r20, 0x00	; 0
 174:	6a e0       	ldi	r22, 0x0A	; 10
 176:	80 e2       	ldi	r24, 0x20	; 32
 178:	0e 94 a9 03 	call	0x752	; 0x752 <SendEvent>
	}
	if( msg->Id == RequestPending){
 17c:	89 81       	ldd	r24, Y+1	; 0x01
 17e:	8b 30       	cpi	r24, 0x0B	; 11
 180:	79 f4       	brne	.+30     	; 0x1a0 <MainCtrl_CheckingScheduler+0x5a>
		_mainCtrl.nextFloor = (FloorType)msg->MsgParamLow;
 182:	4a 81       	ldd	r20, Y+2	; 0x02
 184:	e0 e6       	ldi	r30, 0x60	; 96
 186:	f0 e0       	ldi	r31, 0x00	; 0
 188:	46 83       	std	Z+6, r20	; 0x06
		//_mainCtrl.currentFloor = (FloorType)msg->MsgParamHigh;
		SendEvent(SignalSourceApp, Message_MoveTo, _mainCtrl.nextFloor, _mainCtrl.currentFloor);
 18a:	25 81       	ldd	r18, Z+5	; 0x05
 18c:	61 e0       	ldi	r22, 0x01	; 1
 18e:	80 e2       	ldi	r24, 0x20	; 32
 190:	0e 94 a9 03 	call	0x752	; 0x752 <SendEvent>
		SetState(&_mainCtrl.fsm, MainCtrl_ElevatorHasArrived);
 194:	63 ed       	ldi	r22, 0xD3	; 211
 196:	70 e0       	ldi	r23, 0x00	; 0
 198:	80 e6       	ldi	r24, 0x60	; 96
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	0e 94 98 02 	call	0x530	; 0x530 <SetState>
	}
}
 1a0:	df 91       	pop	r29
 1a2:	cf 91       	pop	r28
 1a4:	08 95       	ret

000001a6 <MainCtrl_ElevatorHasArrived>:
SendEvent(SignalSourceApp, LiftStarted, 0, 0);

}
}*/

void MainCtrl_ElevatorHasArrived(Message* msg){
 1a6:	cf 93       	push	r28
 1a8:	df 93       	push	r29
	//Nachdem der Lift am Ziel Ort angekommen ist wird der Timer für die offene Türe gesetzt
	if(msg->Id == SetDoorOpenTimer){
 1aa:	fc 01       	movw	r30, r24
 1ac:	21 81       	ldd	r18, Z+1	; 0x01
 1ae:	27 30       	cpi	r18, 0x07	; 7
 1b0:	99 f4       	brne	.+38     	; 0x1d8 <MainCtrl_ElevatorHasArrived+0x32>
		_mainCtrl.currentFloor = (FloorType)msg->MsgParamLow;
 1b2:	42 81       	ldd	r20, Z+2	; 0x02
 1b4:	c0 e6       	ldi	r28, 0x60	; 96
 1b6:	d0 e0       	ldi	r29, 0x00	; 0
 1b8:	4d 83       	std	Y+5, r20	; 0x05
		SendEvent(SignalSourceApp, OpenDoor, _mainCtrl.currentFloor, 0);
 1ba:	20 e0       	ldi	r18, 0x00	; 0
 1bc:	68 e0       	ldi	r22, 0x08	; 8
 1be:	80 e2       	ldi	r24, 0x20	; 32
 1c0:	0e 94 a9 03 	call	0x752	; 0x752 <SendEvent>
		_mainCtrl.timer = StartTimer(5000);
 1c4:	88 e8       	ldi	r24, 0x88	; 136
 1c6:	93 e1       	ldi	r25, 0x13	; 19
 1c8:	0e 94 63 06 	call	0xcc6	; 0xcc6 <StartTimer>
 1cc:	8f 83       	std	Y+7, r24	; 0x07
		SetState(&_mainCtrl.fsm, MainCtrl_DoorIsOpen);
 1ce:	62 e0       	ldi	r22, 0x02	; 2
 1d0:	71 e0       	ldi	r23, 0x01	; 1
 1d2:	ce 01       	movw	r24, r28
 1d4:	0e 94 98 02 	call	0x530	; 0x530 <SetState>
	}
}
 1d8:	df 91       	pop	r29
 1da:	cf 91       	pop	r28
 1dc:	08 95       	ret

000001de <FindBit>:
	return FindBit(buttonEventParameter);
}

uint8_t FindBit(uint8_t value)
{
	if( value == 0) return 0xFF;
 1de:	88 23       	and	r24, r24
 1e0:	49 f0       	breq	.+18     	; 0x1f4 <FindBit+0x16>
	uint8_t pos = 0;
	while(!(value&1))
 1e2:	80 fd       	sbrc	r24, 0
 1e4:	09 c0       	rjmp	.+18     	; 0x1f8 <FindBit+0x1a>
 1e6:	90 e0       	ldi	r25, 0x00	; 0
	{
		value >>=1;
 1e8:	86 95       	lsr	r24
		pos++;
 1ea:	9f 5f       	subi	r25, 0xFF	; 255

uint8_t FindBit(uint8_t value)
{
	if( value == 0) return 0xFF;
	uint8_t pos = 0;
	while(!(value&1))
 1ec:	80 ff       	sbrs	r24, 0
 1ee:	fc cf       	rjmp	.-8      	; 0x1e8 <FindBit+0xa>
	{
		value >>=1;
		pos++;
 1f0:	89 2f       	mov	r24, r25
 1f2:	08 95       	ret
	return FindBit(buttonEventParameter);
}

uint8_t FindBit(uint8_t value)
{
	if( value == 0) return 0xFF;
 1f4:	8f ef       	ldi	r24, 0xFF	; 255
 1f6:	08 95       	ret
	uint8_t pos = 0;
	while(!(value&1))
 1f8:	80 e0       	ldi	r24, 0x00	; 0
	{
		value >>=1;
		pos++;
	}
	return pos;
 1fa:	08 95       	ret

000001fc <GetFloorReservation>:
	}
}

FloorType GetFloorReservation(uint8_t buttonEventParameter )
{
	return FindBit(buttonEventParameter) - 4;
 1fc:	0e 94 ef 00 	call	0x1de	; 0x1de <FindBit>
}
 200:	84 50       	subi	r24, 0x04	; 4
 202:	08 95       	ret

00000204 <MainCtrl_DoorIsOpen>:
		_mainCtrl.timer = StartTimer(5000);
		SetState(&_mainCtrl.fsm, MainCtrl_DoorIsOpen);
	}
}

void MainCtrl_DoorIsOpen(Message* msg){
 204:	cf 93       	push	r28
 206:	df 93       	push	r29
 208:	ec 01       	movw	r28, r24
	//Wenn Türe offen ist und jemand den gleichen Knopf drückt wie den currentFloor, öffnet sich die Tür wieder
	if( IS_BUTTON_PRESS (msg)){
 20a:	89 81       	ldd	r24, Y+1	; 0x01
 20c:	87 3c       	cpi	r24, 0xC7	; 199
 20e:	c9 f4       	brne	.+50     	; 0x242 <MainCtrl_DoorIsOpen+0x3e>
 210:	8b 81       	ldd	r24, Y+3	; 0x03
 212:	81 30       	cpi	r24, 0x01	; 1
 214:	a9 f5       	brne	.+106    	; 0x280 <MainCtrl_DoorIsOpen+0x7c>
		if(IS_RESERVATION(msg->MsgParamLow)){
 216:	8a 81       	ldd	r24, Y+2	; 0x02
 218:	98 2f       	mov	r25, r24
 21a:	90 7f       	andi	r25, 0xF0	; 240
 21c:	89 f1       	breq	.+98     	; 0x280 <MainCtrl_DoorIsOpen+0x7c>
			FloorType reservation = GetFloorReservation(msg->MsgParamLow);
 21e:	0e 94 fe 00 	call	0x1fc	; 0x1fc <GetFloorReservation>
			if( reservation == _mainCtrl.currentFloor ){
 222:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <__DATA_REGION_ORIGIN__+0x5>
 226:	89 13       	cpse	r24, r25
 228:	2b c0       	rjmp	.+86     	; 0x280 <MainCtrl_DoorIsOpen+0x7c>
				SendEvent(SignalSourceApp, OpenDoor, reservation, 0);
 22a:	20 e0       	ldi	r18, 0x00	; 0
 22c:	48 2f       	mov	r20, r24
 22e:	68 e0       	ldi	r22, 0x08	; 8
 230:	80 e2       	ldi	r24, 0x20	; 32
 232:	0e 94 a9 03 	call	0x752	; 0x752 <SendEvent>
				_mainCtrl.timer = StartTimer(5000);
 236:	88 e8       	ldi	r24, 0x88	; 136
 238:	93 e1       	ldi	r25, 0x13	; 19
 23a:	0e 94 63 06 	call	0xcc6	; 0xcc6 <StartTimer>
 23e:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <__DATA_REGION_ORIGIN__+0x7>
			}
		}
	}
	
	//Wenn der Timer für die offene Tür ablauft
	if( msg->Id == TimerEvent )
 242:	89 81       	ldd	r24, Y+1	; 0x01
 244:	88 3c       	cpi	r24, 0xC8	; 200
 246:	e1 f4       	brne	.+56     	; 0x280 <MainCtrl_DoorIsOpen+0x7c>
	{
		StopTimer(_mainCtrl.timer);
 248:	c0 e6       	ldi	r28, 0x60	; 96
 24a:	d0 e0       	ldi	r29, 0x00	; 0
 24c:	8f 81       	ldd	r24, Y+7	; 0x07
 24e:	0e 94 9a 06 	call	0xd34	; 0xd34 <StopTimer>
		Usart_PutChar(0xA1);
 252:	81 ea       	ldi	r24, 0xA1	; 161
 254:	0e 94 a5 03 	call	0x74a	; 0x74a <Usart_PutChar>
		Usart_PutChar(_mainCtrl.currentFloor);
 258:	8d 81       	ldd	r24, Y+5	; 0x05
 25a:	0e 94 a5 03 	call	0x74a	; 0x74a <Usart_PutChar>
		SendEvent(SignalSourceApp, CloseDoor, _mainCtrl.currentFloor, 0);
 25e:	20 e0       	ldi	r18, 0x00	; 0
 260:	4d 81       	ldd	r20, Y+5	; 0x05
 262:	64 e0       	ldi	r22, 0x04	; 4
 264:	80 e2       	ldi	r24, 0x20	; 32
 266:	0e 94 a9 03 	call	0x752	; 0x752 <SendEvent>
		SendEvent(SignalSourceApp, Message_ElevatorReady, 0, 0);
 26a:	20 e0       	ldi	r18, 0x00	; 0
 26c:	40 e0       	ldi	r20, 0x00	; 0
 26e:	63 e0       	ldi	r22, 0x03	; 3
 270:	80 e2       	ldi	r24, 0x20	; 32
 272:	0e 94 a9 03 	call	0x752	; 0x752 <SendEvent>
		SetState(&_mainCtrl.fsm, MainCtrl_CheckingScheduler);
 276:	63 ea       	ldi	r22, 0xA3	; 163
 278:	70 e0       	ldi	r23, 0x00	; 0
 27a:	ce 01       	movw	r24, r28
 27c:	0e 94 98 02 	call	0x530	; 0x530 <SetState>
	}
}
 280:	df 91       	pop	r29
 282:	cf 91       	pop	r28
 284:	08 95       	ret

00000286 <NotifyCalibrationDone>:
	.target = Floor0,
	.fsm  = { .Next = 0, .CurrentState = MotorCtrl_Initializing, .RxMask = 0xFF },
};

void NotifyCalibrationDone(uint8_t currentPos, uint8_t targetPostion)
{
 286:	1f 93       	push	r17
 288:	cf 93       	push	r28
 28a:	df 93       	push	r29
 28c:	d8 2f       	mov	r29, r24
 28e:	16 2f       	mov	r17, r22
	FloorType floor = (FloorType)currentPos/POS_STEPS_PER_FLOOR;
 290:	c8 2f       	mov	r28, r24
 292:	c2 95       	swap	r28
 294:	cf 70       	andi	r28, 0x0F	; 15
	SetDisplay(floor);
 296:	8c 2f       	mov	r24, r28
 298:	0e 94 42 03 	call	0x684	; 0x684 <SetDisplay>
	if( ((currentPos %floor) == 0 ) && floor == Floor0 )
 29c:	8d 2f       	mov	r24, r29
 29e:	6c 2f       	mov	r22, r28
 2a0:	0e 94 1a 07 	call	0xe34	; 0xe34 <__udivmodqi4>
 2a4:	91 11       	cpse	r25, r1
 2a6:	08 c0       	rjmp	.+16     	; 0x2b8 <NotifyCalibrationDone+0x32>
 2a8:	c1 11       	cpse	r28, r1
 2aa:	06 c0       	rjmp	.+12     	; 0x2b8 <NotifyCalibrationDone+0x32>
	{
		SendEvent(SignalSourceEnvironment, LiftCalibrated, currentPos, targetPostion);
 2ac:	21 2f       	mov	r18, r17
 2ae:	4d 2f       	mov	r20, r29
 2b0:	62 ec       	ldi	r22, 0xC2	; 194
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	0e 94 a9 03 	call	0x752	; 0x752 <SendEvent>
	}
}
 2b8:	df 91       	pop	r29
 2ba:	cf 91       	pop	r28
 2bc:	1f 91       	pop	r17
 2be:	08 95       	ret

000002c0 <OnElevatorPositionChanged>:
		SendEvent(SignalSourceApp, Message_ElevatorReady, Floor0, 0);
	}
}

void OnElevatorPositionChanged(uint8_t currentPos, uint8_t targetPos)
{
 2c0:	26 2f       	mov	r18, r22
	SendEvent(SignalSourceElevator, Message_PosChanged, currentPos, targetPos);
 2c2:	48 2f       	mov	r20, r24
 2c4:	62 e0       	ldi	r22, 0x02	; 2
 2c6:	82 e0       	ldi	r24, 0x02	; 2
 2c8:	0e 94 a9 03 	call	0x752	; 0x752 <SendEvent>
 2cc:	08 95       	ret

000002ce <MotorCtrl_Initializing>:
		SendEvent(SignalSourceEnvironment, LiftCalibrated, currentPos, targetPostion);
	}
}

void MotorCtrl_Initializing(Message* msg)
{
 2ce:	cf 93       	push	r28
 2d0:	df 93       	push	r29
 2d2:	ec 01       	movw	r28, r24
	if( msg->Id == LiftStarted)
 2d4:	89 81       	ldd	r24, Y+1	; 0x01
 2d6:	81 3c       	cpi	r24, 0xC1	; 193
 2d8:	a9 f4       	brne	.+42     	; 0x304 <MotorCtrl_Initializing+0x36>
	{
		SetDoorState(DoorClosed, Floor0);
 2da:	60 e0       	ldi	r22, 0x00	; 0
 2dc:	80 e2       	ldi	r24, 0x20	; 32
 2de:	0e 94 0d 03 	call	0x61a	; 0x61a <SetDoorState>
		SetDoorState(DoorClosed, Floor1);
 2e2:	61 e0       	ldi	r22, 0x01	; 1
 2e4:	80 e2       	ldi	r24, 0x20	; 32
 2e6:	0e 94 0d 03 	call	0x61a	; 0x61a <SetDoorState>
		SetDoorState(DoorClosed, Floor2);
 2ea:	62 e0       	ldi	r22, 0x02	; 2
 2ec:	80 e2       	ldi	r24, 0x20	; 32
 2ee:	0e 94 0d 03 	call	0x61a	; 0x61a <SetDoorState>
		SetDoorState(DoorClosed, Floor3);
 2f2:	63 e0       	ldi	r22, 0x03	; 3
 2f4:	80 e2       	ldi	r24, 0x20	; 32
 2f6:	0e 94 0d 03 	call	0x61a	; 0x61a <SetDoorState>
		
		CalibrateElevatorPosition(NotifyCalibrationDone);
 2fa:	83 e4       	ldi	r24, 0x43	; 67
 2fc:	91 e0       	ldi	r25, 0x01	; 1
 2fe:	0e 94 3e 03 	call	0x67c	; 0x67c <CalibrateElevatorPosition>
		return;
 302:	17 c0       	rjmp	.+46     	; 0x332 <MotorCtrl_Initializing+0x64>
	}
	if( msg->Id == LiftCalibrated )
 304:	82 3c       	cpi	r24, 0xC2	; 194
 306:	a9 f4       	brne	.+42     	; 0x332 <MotorCtrl_Initializing+0x64>
	{
			Usart_PutChar(0x19);
 308:	89 e1       	ldi	r24, 0x19	; 25
 30a:	0e 94 a5 03 	call	0x74a	; 0x74a <Usart_PutChar>
			Usart_PutChar(msg->Id);
 30e:	89 81       	ldd	r24, Y+1	; 0x01
 310:	0e 94 a5 03 	call	0x74a	; 0x74a <Usart_PutChar>
		SetDisplay(Floor0);
 314:	80 e0       	ldi	r24, 0x00	; 0
 316:	0e 94 42 03 	call	0x684	; 0x684 <SetDisplay>
		SetState(&_motorCtrl.fsm, MotorCtrl_Stopped);
 31a:	6d eb       	ldi	r22, 0xBD	; 189
 31c:	71 e0       	ldi	r23, 0x01	; 1
 31e:	88 e6       	ldi	r24, 0x68	; 104
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	0e 94 98 02 	call	0x530	; 0x530 <SetState>
		SendEvent(SignalSourceApp, Message_ElevatorReady, Floor0, 0);
 326:	20 e0       	ldi	r18, 0x00	; 0
 328:	40 e0       	ldi	r20, 0x00	; 0
 32a:	63 e0       	ldi	r22, 0x03	; 3
 32c:	80 e2       	ldi	r24, 0x20	; 32
 32e:	0e 94 a9 03 	call	0x752	; 0x752 <SendEvent>
	}
}
 332:	df 91       	pop	r29
 334:	cf 91       	pop	r28
 336:	08 95       	ret

00000338 <MotorCtrl_Moving>:
	
}


void MotorCtrl_Moving(Message* msg)
{
 338:	cf 93       	push	r28
 33a:	df 93       	push	r29
	if( msg->Id == Message_PosChanged && msg->MsgParamLow == msg->MsgParamHigh)
 33c:	fc 01       	movw	r30, r24
 33e:	21 81       	ldd	r18, Z+1	; 0x01
 340:	22 30       	cpi	r18, 0x02	; 2
 342:	c1 f4       	brne	.+48     	; 0x374 <MotorCtrl_Moving+0x3c>
 344:	62 81       	ldd	r22, Z+2	; 0x02
 346:	83 81       	ldd	r24, Z+3	; 0x03
 348:	68 13       	cpse	r22, r24
 34a:	14 c0       	rjmp	.+40     	; 0x374 <MotorCtrl_Moving+0x3c>
	{
		_motorCtrl.target = (FloorType)msg->MsgParamLow/POS_STEPS_PER_FLOOR;
 34c:	62 95       	swap	r22
 34e:	6f 70       	andi	r22, 0x0F	; 15
 350:	c8 e6       	ldi	r28, 0x68	; 104
 352:	d0 e0       	ldi	r29, 0x00	; 0
 354:	6e 83       	std	Y+6, r22	; 0x06
		SetDoorState(DoorOpen, _motorCtrl.target);
 356:	80 e1       	ldi	r24, 0x10	; 16
 358:	0e 94 0d 03 	call	0x61a	; 0x61a <SetDoorState>
		_motorCtrl.start = _motorCtrl.target;
 35c:	4e 81       	ldd	r20, Y+6	; 0x06
 35e:	4d 83       	std	Y+5, r20	; 0x05
		SendEvent(SignalSourceApp, SetDoorOpenTimer, _motorCtrl.target, 0);
 360:	20 e0       	ldi	r18, 0x00	; 0
 362:	67 e0       	ldi	r22, 0x07	; 7
 364:	80 e2       	ldi	r24, 0x20	; 32
 366:	0e 94 a9 03 	call	0x752	; 0x752 <SendEvent>
		SetState(&_motorCtrl.fsm, MotorCtrl_Stopped);
 36a:	6d eb       	ldi	r22, 0xBD	; 189
 36c:	71 e0       	ldi	r23, 0x01	; 1
 36e:	ce 01       	movw	r24, r28
 370:	0e 94 98 02 	call	0x530	; 0x530 <SetState>
	}
}
 374:	df 91       	pop	r29
 376:	cf 91       	pop	r28
 378:	08 95       	ret

0000037a <MotorCtrl_Stopped>:
	SendEvent(SignalSourceElevator, Message_PosChanged, currentPos, targetPos);
}


void MotorCtrl_Stopped(Message* msg)
{
 37a:	0f 93       	push	r16
 37c:	1f 93       	push	r17
 37e:	cf 93       	push	r28
 380:	df 93       	push	r29
 382:	ec 01       	movw	r28, r24
	Usart_PutChar(0x11);
 384:	81 e1       	ldi	r24, 0x11	; 17
 386:	0e 94 a5 03 	call	0x74a	; 0x74a <Usart_PutChar>
		Usart_PutChar(msg->Id);
 38a:	89 81       	ldd	r24, Y+1	; 0x01
 38c:	0e 94 a5 03 	call	0x74a	; 0x74a <Usart_PutChar>
	Usart_PutChar(msg->MsgParamLow);
 390:	8a 81       	ldd	r24, Y+2	; 0x02
 392:	0e 94 a5 03 	call	0x74a	; 0x74a <Usart_PutChar>

	if( msg->Id == Message_MoveTo && msg->MsgParamLow < 4)
 396:	89 81       	ldd	r24, Y+1	; 0x01
 398:	81 30       	cpi	r24, 0x01	; 1
 39a:	d1 f4       	brne	.+52     	; 0x3d0 <MotorCtrl_Stopped+0x56>
 39c:	8a 81       	ldd	r24, Y+2	; 0x02
 39e:	84 30       	cpi	r24, 0x04	; 4
 3a0:	48 f5       	brcc	.+82     	; 0x3f4 <MotorCtrl_Stopped+0x7a>
	{
		Usart_PutChar(0x12);
 3a2:	82 e1       	ldi	r24, 0x12	; 18
 3a4:	0e 94 a5 03 	call	0x74a	; 0x74a <Usart_PutChar>
		_motorCtrl.target = (FloorType)msg->MsgParamLow;
 3a8:	8a 81       	ldd	r24, Y+2	; 0x02
 3aa:	08 e6       	ldi	r16, 0x68	; 104
 3ac:	10 e0       	ldi	r17, 0x00	; 0
 3ae:	f8 01       	movw	r30, r16
 3b0:	86 83       	std	Z+6, r24	; 0x06
		_motorCtrl.start = (FloorType)msg->MsgParamHigh;
 3b2:	8b 81       	ldd	r24, Y+3	; 0x03
 3b4:	85 83       	std	Z+5, r24	; 0x05
		SetState(&_motorCtrl.fsm, MotorCtrl_Moving);
 3b6:	6c e9       	ldi	r22, 0x9C	; 156
 3b8:	71 e0       	ldi	r23, 0x01	; 1
 3ba:	c8 01       	movw	r24, r16
 3bc:	0e 94 98 02 	call	0x530	; 0x530 <SetState>
		MoveElevator(_motorCtrl.target * POS_STEPS_PER_FLOOR, OnElevatorPositionChanged );
 3c0:	f8 01       	movw	r30, r16
 3c2:	86 81       	ldd	r24, Z+6	; 0x06
 3c4:	60 e6       	ldi	r22, 0x60	; 96
 3c6:	71 e0       	ldi	r23, 0x01	; 1
 3c8:	82 95       	swap	r24
 3ca:	80 7f       	andi	r24, 0xF0	; 240
 3cc:	0e 94 2a 03 	call	0x654	; 0x654 <MoveElevator>
		if(distance == 1 || distance == -1){
			SetElevatorSpeed(SpeedType.Medium);
		}*/
	}
	
	if(msg->Id == OpenDoor){
 3d0:	89 81       	ldd	r24, Y+1	; 0x01
 3d2:	88 30       	cpi	r24, 0x08	; 8
 3d4:	31 f4       	brne	.+12     	; 0x3e2 <MotorCtrl_Stopped+0x68>
		_motorCtrl.start = (FloorType)msg->MsgParamLow;
 3d6:	6a 81       	ldd	r22, Y+2	; 0x02
 3d8:	60 93 6d 00 	sts	0x006D, r22	; 0x80006d <_motorCtrl+0x5>
		SetDoorState(DoorOpen, _motorCtrl.start);
 3dc:	80 e1       	ldi	r24, 0x10	; 16
 3de:	0e 94 0d 03 	call	0x61a	; 0x61a <SetDoorState>
	}
	
	if(msg->Id == CloseDoor){
 3e2:	89 81       	ldd	r24, Y+1	; 0x01
 3e4:	84 30       	cpi	r24, 0x04	; 4
 3e6:	31 f4       	brne	.+12     	; 0x3f4 <MotorCtrl_Stopped+0x7a>
		_motorCtrl.start = (FloorType)msg->MsgParamLow;
 3e8:	6a 81       	ldd	r22, Y+2	; 0x02
 3ea:	60 93 6d 00 	sts	0x006D, r22	; 0x80006d <_motorCtrl+0x5>
		SetDoorState(DoorClosed, _motorCtrl.start);
 3ee:	80 e2       	ldi	r24, 0x20	; 32
 3f0:	0e 94 0d 03 	call	0x61a	; 0x61a <SetDoorState>
	}
	
}
 3f4:	df 91       	pop	r29
 3f6:	cf 91       	pop	r28
 3f8:	1f 91       	pop	r17
 3fa:	0f 91       	pop	r16
 3fc:	08 95       	ret

000003fe <registerScheduler>:
};


void registerScheduler()
{
	RegisterFsm(&_scheduleCtrl.fsm);
 3fe:	8f e6       	ldi	r24, 0x6F	; 111
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	0e 94 a8 02 	call	0x550	; 0x550 <RegisterFsm>
 406:	08 95       	ret

00000408 <Enqueue>:
	}
}

Boolean Enqueue(FloorType floor)
{
	uint8_t nextIn = (_scheduleCtrl.qIn + 1)%countof(_scheduleCtrl.ElevatorNextPosQ);
 408:	af e6       	ldi	r26, 0x6F	; 111
 40a:	b0 e0       	ldi	r27, 0x00	; 0
 40c:	1a 96       	adiw	r26, 0x0a	; 10
 40e:	ec 91       	ld	r30, X
 410:	1a 97       	sbiw	r26, 0x0a	; 10
 412:	91 e0       	ldi	r25, 0x01	; 1
 414:	9e 0f       	add	r25, r30
 416:	93 70       	andi	r25, 0x03	; 3
	if( nextIn != _scheduleCtrl.qOut)
 418:	1b 96       	adiw	r26, 0x0b	; 11
 41a:	2c 91       	ld	r18, X
 41c:	92 17       	cp	r25, r18
 41e:	41 f0       	breq	.+16     	; 0x430 <Enqueue+0x28>
	{
		_scheduleCtrl.ElevatorNextPosQ[_scheduleCtrl.qIn] = floor;
 420:	f0 e0       	ldi	r31, 0x00	; 0
 422:	e1 59       	subi	r30, 0x91	; 145
 424:	ff 4f       	sbci	r31, 0xFF	; 255
 426:	86 83       	std	Z+6, r24	; 0x06
		_scheduleCtrl.qIn = nextIn;
 428:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <_scheduleCtrl+0xa>
		return true;
 42c:	81 e0       	ldi	r24, 0x01	; 1
 42e:	08 95       	ret
	}
	return false;
 430:	80 e0       	ldi	r24, 0x00	; 0
}
 432:	08 95       	ret

00000434 <ScheduleCtrl_AwaitElevatorRequest>:
	RegisterFsm(&_scheduleCtrl.fsm);
}


void ScheduleCtrl_AwaitElevatorRequest(Message* msg)
{
 434:	1f 93       	push	r17
 436:	cf 93       	push	r28
 438:	df 93       	push	r29
 43a:	ec 01       	movw	r28, r24
	Usart_PutChar(0x80);
 43c:	80 e8       	ldi	r24, 0x80	; 128
 43e:	0e 94 a5 03 	call	0x74a	; 0x74a <Usart_PutChar>
	Usart_PutChar(msg->Id);
 442:	89 81       	ldd	r24, Y+1	; 0x01
 444:	0e 94 a5 03 	call	0x74a	; 0x74a <Usart_PutChar>

	if( IS_BUTTON_PRESS( msg ) )
 448:	89 81       	ldd	r24, Y+1	; 0x01
 44a:	87 3c       	cpi	r24, 0xC7	; 199
 44c:	49 f5       	brne	.+82     	; 0x4a0 <ScheduleCtrl_AwaitElevatorRequest+0x6c>
 44e:	8b 81       	ldd	r24, Y+3	; 0x03
 450:	81 30       	cpi	r24, 0x01	; 1
 452:	09 f0       	breq	.+2      	; 0x456 <ScheduleCtrl_AwaitElevatorRequest+0x22>
 454:	3f c0       	rjmp	.+126    	; 0x4d4 <ScheduleCtrl_AwaitElevatorRequest+0xa0>
	{
		Usart_PutChar(0x81);
 456:	81 e8       	ldi	r24, 0x81	; 129
 458:	0e 94 a5 03 	call	0x74a	; 0x74a <Usart_PutChar>
		if( IS_RESERVATION(msg->MsgParamLow))
 45c:	8a 81       	ldd	r24, Y+2	; 0x02
 45e:	98 2f       	mov	r25, r24
 460:	90 7f       	andi	r25, 0xF0	; 240
 462:	71 f0       	breq	.+28     	; 0x480 <ScheduleCtrl_AwaitElevatorRequest+0x4c>
		{

			FloorType requestedFloor = GetFloorReservation(msg->MsgParamLow);
 464:	0e 94 fe 00 	call	0x1fc	; 0x1fc <GetFloorReservation>
 468:	18 2f       	mov	r17, r24
			SetIndicatorFloorState(requestedFloor);
 46a:	0e 94 45 03 	call	0x68a	; 0x68a <SetIndicatorFloorState>
			Enqueue(requestedFloor);
 46e:	81 2f       	mov	r24, r17
 470:	0e 94 04 02 	call	0x408	; 0x408 <Enqueue>
			SendEvent(SignalSourceApp, RequestPending, requestedFloor, 0);
 474:	20 e0       	ldi	r18, 0x00	; 0
 476:	41 2f       	mov	r20, r17
 478:	6b e0       	ldi	r22, 0x0B	; 11
 47a:	80 e2       	ldi	r24, 0x20	; 32
 47c:	0e 94 a9 03 	call	0x752	; 0x752 <SendEvent>
		}
		if( IS_TARGET_SELECTION(msg->MsgParamLow))
 480:	1a 81       	ldd	r17, Y+2	; 0x02
 482:	81 2f       	mov	r24, r17
 484:	8f 70       	andi	r24, 0x0F	; 15
 486:	61 f0       	breq	.+24     	; 0x4a0 <ScheduleCtrl_AwaitElevatorRequest+0x6c>
		{
			FloorType requestedFloor = (FloorType)msg->MsgParamLow;
			SetIndicatorElevatorState(requestedFloor);
 488:	81 2f       	mov	r24, r17
 48a:	0e 94 56 03 	call	0x6ac	; 0x6ac <SetIndicatorElevatorState>
			Enqueue((requestedFloor));
 48e:	81 2f       	mov	r24, r17
 490:	0e 94 04 02 	call	0x408	; 0x408 <Enqueue>
			SendEvent(SignalSourceApp, RequestPending, requestedFloor, 0);
 494:	20 e0       	ldi	r18, 0x00	; 0
 496:	41 2f       	mov	r20, r17
 498:	6b e0       	ldi	r22, 0x0B	; 11
 49a:	80 e2       	ldi	r24, 0x20	; 32
 49c:	0e 94 a9 03 	call	0x752	; 0x752 <SendEvent>

		}
		
	}
	
	if(msg->Id == GetNextFloor)
 4a0:	89 81       	ldd	r24, Y+1	; 0x01
 4a2:	8a 30       	cpi	r24, 0x0A	; 10
 4a4:	b9 f4       	brne	.+46     	; 0x4d4 <ScheduleCtrl_AwaitElevatorRequest+0xa0>
	{
		Usart_PutChar(0x82);
 4a6:	82 e8       	ldi	r24, 0x82	; 130
 4a8:	0e 94 a5 03 	call	0x74a	; 0x74a <Usart_PutChar>
		if(_scheduleCtrl.qIn != _scheduleCtrl.qOut){
 4ac:	ef e6       	ldi	r30, 0x6F	; 111
 4ae:	f0 e0       	ldi	r31, 0x00	; 0
 4b0:	92 85       	ldd	r25, Z+10	; 0x0a
 4b2:	83 85       	ldd	r24, Z+11	; 0x0b
 4b4:	98 17       	cp	r25, r24
 4b6:	41 f0       	breq	.+16     	; 0x4c8 <ScheduleCtrl_AwaitElevatorRequest+0x94>
			SendEvent(SignalSourceApp, RequestPending, (FloorType)_scheduleCtrl.ElevatorNextPosQ, msg->MsgParamHigh);
 4b8:	2b 81       	ldd	r18, Y+3	; 0x03
 4ba:	45 e7       	ldi	r20, 0x75	; 117
 4bc:	50 e0       	ldi	r21, 0x00	; 0
 4be:	6b e0       	ldi	r22, 0x0B	; 11
 4c0:	80 e2       	ldi	r24, 0x20	; 32
 4c2:	0e 94 a9 03 	call	0x752	; 0x752 <SendEvent>
 4c6:	06 c0       	rjmp	.+12     	; 0x4d4 <ScheduleCtrl_AwaitElevatorRequest+0xa0>
		}
		else{
			_scheduleCtrl.timer = StartTimer(1000);
 4c8:	88 ee       	ldi	r24, 0xE8	; 232
 4ca:	93 e0       	ldi	r25, 0x03	; 3
 4cc:	0e 94 63 06 	call	0xcc6	; 0xcc6 <StartTimer>
 4d0:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <_scheduleCtrl+0xc>
		}
		
	}
}
 4d4:	df 91       	pop	r29
 4d6:	cf 91       	pop	r28
 4d8:	1f 91       	pop	r17
 4da:	08 95       	ret

000004dc <TestFunction>:
{
	
}

void TestFunction(uint8_t* data, uint8_t nrOfBytes)
{
 4dc:	cf 93       	push	r28
 4de:	df 93       	push	r29
 4e0:	fc 01       	movw	r30, r24
	if( data[0] == 1 )
 4e2:	90 81       	ld	r25, Z
 4e4:	91 30       	cpi	r25, 0x01	; 1
 4e6:	49 f4       	brne	.+18     	; 0x4fa <TestFunction+0x1e>
 4e8:	ce e8       	ldi	r28, 0x8E	; 142
 4ea:	d0 e0       	ldi	r29, 0x00	; 0
 4ec:	88 e4       	ldi	r24, 0x48	; 72
	{
		char *ch = "Hello-World\n";
		while( *ch != 0 )
		{
			Usart_PutChar(*ch++);
 4ee:	0e 94 a5 03 	call	0x74a	; 0x74a <Usart_PutChar>
void TestFunction(uint8_t* data, uint8_t nrOfBytes)
{
	if( data[0] == 1 )
	{
		char *ch = "Hello-World\n";
		while( *ch != 0 )
 4f2:	89 91       	ld	r24, Y+
 4f4:	81 11       	cpse	r24, r1
 4f6:	fb cf       	rjmp	.-10     	; 0x4ee <TestFunction+0x12>
 4f8:	08 c0       	rjmp	.+16     	; 0x50a <TestFunction+0x2e>
		{
			Usart_PutChar(*ch++);
		}
	}
	else if( data[0] == 2 )
 4fa:	92 30       	cpi	r25, 0x02	; 2
 4fc:	31 f4       	brne	.+12     	; 0x50a <TestFunction+0x2e>
	{
		SendEvent(SignalSourceApp, Message_MoveTo, data[1], 0);
 4fe:	20 e0       	ldi	r18, 0x00	; 0
 500:	41 81       	ldd	r20, Z+1	; 0x01
 502:	61 e0       	ldi	r22, 0x01	; 1
 504:	80 e2       	ldi	r24, 0x20	; 32
 506:	0e 94 a9 03 	call	0x752	; 0x752 <SendEvent>
	}
}
 50a:	df 91       	pop	r29
 50c:	cf 91       	pop	r28
 50e:	08 95       	ret

00000510 <EnterAtomic>:
 510:	f8 94       	cli
 512:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <enterAtomicNesting>
 516:	8f 5f       	subi	r24, 0xFF	; 255
 518:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <enterAtomicNesting>
 51c:	08 95       	ret

0000051e <LeaveAtomic>:
 51e:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <enterAtomicNesting>
 522:	81 50       	subi	r24, 0x01	; 1
 524:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <enterAtomicNesting>
 528:	81 11       	cpse	r24, r1
 52a:	01 c0       	rjmp	.+2      	; 0x52e <LeaveAtomic+0x10>
 52c:	78 94       	sei
 52e:	08 95       	ret

00000530 <SetState>:
 530:	0f 93       	push	r16
 532:	1f 93       	push	r17
 534:	cf 93       	push	r28
 536:	df 93       	push	r29
 538:	ec 01       	movw	r28, r24
 53a:	8b 01       	movw	r16, r22
 53c:	0e 94 88 02 	call	0x510	; 0x510 <EnterAtomic>
 540:	1c 83       	std	Y+4, r17	; 0x04
 542:	0b 83       	std	Y+3, r16	; 0x03
 544:	df 91       	pop	r29
 546:	cf 91       	pop	r28
 548:	1f 91       	pop	r17
 54a:	0f 91       	pop	r16
 54c:	0c 94 8f 02 	jmp	0x51e	; 0x51e <LeaveAtomic>

00000550 <RegisterFsm>:
 550:	e0 91 7c 00 	lds	r30, 0x007C	; 0x80007c <anchor>
 554:	f0 91 7d 00 	lds	r31, 0x007D	; 0x80007d <anchor+0x1>
 558:	ac e7       	ldi	r26, 0x7C	; 124
 55a:	b0 e0       	ldi	r27, 0x00	; 0
 55c:	20 e0       	ldi	r18, 0x00	; 0
 55e:	ec 37       	cpi	r30, 0x7C	; 124
 560:	f2 07       	cpc	r31, r18
 562:	29 f0       	breq	.+10     	; 0x56e <RegisterFsm+0x1e>
 564:	df 01       	movw	r26, r30
 566:	01 90       	ld	r0, Z+
 568:	f0 81       	ld	r31, Z
 56a:	e0 2d       	mov	r30, r0
 56c:	f7 cf       	rjmp	.-18     	; 0x55c <RegisterFsm+0xc>
 56e:	8d 93       	st	X+, r24
 570:	9c 93       	st	X, r25
 572:	dc 01       	movw	r26, r24
 574:	ed 93       	st	X+, r30
 576:	fc 93       	st	X, r31
 578:	08 95       	ret

0000057a <DispatchEvent>:
 57a:	0f 93       	push	r16
 57c:	1f 93       	push	r17
 57e:	cf 93       	push	r28
 580:	df 93       	push	r29
 582:	0e 94 88 02 	call	0x510	; 0x510 <EnterAtomic>
 586:	90 91 b3 00 	lds	r25, 0x00B3	; 0x8000b3 <msgQ_out>
 58a:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <msgQ_in>
 58e:	98 17       	cp	r25, r24
 590:	59 f0       	breq	.+22     	; 0x5a8 <DispatchEvent+0x2e>
 592:	84 e0       	ldi	r24, 0x04	; 4
 594:	98 9f       	mul	r25, r24
 596:	e0 01       	movw	r28, r0
 598:	11 24       	eor	r1, r1
 59a:	cb 54       	subi	r28, 0x4B	; 75
 59c:	df 4f       	sbci	r29, 0xFF	; 255
 59e:	9f 5f       	subi	r25, 0xFF	; 255
 5a0:	9f 71       	andi	r25, 0x1F	; 31
 5a2:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <msgQ_out>
 5a6:	02 c0       	rjmp	.+4      	; 0x5ac <DispatchEvent+0x32>
 5a8:	c0 e0       	ldi	r28, 0x00	; 0
 5aa:	d0 e0       	ldi	r29, 0x00	; 0
 5ac:	0e 94 8f 02 	call	0x51e	; 0x51e <LeaveAtomic>
 5b0:	20 97       	sbiw	r28, 0x00	; 0
 5b2:	c9 f0       	breq	.+50     	; 0x5e6 <DispatchEvent+0x6c>
 5b4:	00 91 7c 00 	lds	r16, 0x007C	; 0x80007c <anchor>
 5b8:	10 91 7d 00 	lds	r17, 0x007D	; 0x80007d <anchor+0x1>
 5bc:	f0 e0       	ldi	r31, 0x00	; 0
 5be:	0c 37       	cpi	r16, 0x7C	; 124
 5c0:	1f 07       	cpc	r17, r31
 5c2:	89 f0       	breq	.+34     	; 0x5e6 <DispatchEvent+0x6c>
 5c4:	d8 01       	movw	r26, r16
 5c6:	12 96       	adiw	r26, 0x02	; 2
 5c8:	9c 91       	ld	r25, X
 5ca:	12 97       	sbiw	r26, 0x02	; 2
 5cc:	88 81       	ld	r24, Y
 5ce:	89 23       	and	r24, r25
 5d0:	31 f0       	breq	.+12     	; 0x5de <DispatchEvent+0x64>
 5d2:	13 96       	adiw	r26, 0x03	; 3
 5d4:	ed 91       	ld	r30, X+
 5d6:	fc 91       	ld	r31, X
 5d8:	14 97       	sbiw	r26, 0x04	; 4
 5da:	ce 01       	movw	r24, r28
 5dc:	09 95       	icall
 5de:	f8 01       	movw	r30, r16
 5e0:	00 81       	ld	r16, Z
 5e2:	11 81       	ldd	r17, Z+1	; 0x01
 5e4:	eb cf       	rjmp	.-42     	; 0x5bc <DispatchEvent+0x42>
 5e6:	df 91       	pop	r29
 5e8:	cf 91       	pop	r28
 5ea:	1f 91       	pop	r17
 5ec:	0f 91       	pop	r16
 5ee:	08 95       	ret

000005f0 <InitializeCounter>:
 5f0:	12 be       	out	0x32, r1	; 50
 5f2:	8b e0       	ldi	r24, 0x0B	; 11
 5f4:	83 bf       	out	0x33, r24	; 51
 5f6:	8d e7       	ldi	r24, 0x7D	; 125
 5f8:	8c bf       	out	0x3c, r24	; 60
 5fa:	89 b7       	in	r24, 0x39	; 57
 5fc:	82 60       	ori	r24, 0x02	; 2
 5fe:	89 bf       	out	0x39, r24	; 57
 600:	80 e8       	ldi	r24, 0x80	; 128
 602:	91 e0       	ldi	r25, 0x01	; 1
 604:	9b bd       	out	0x2b, r25	; 43
 606:	8a bd       	out	0x2a, r24	; 42
 608:	1d bc       	out	0x2d, r1	; 45
 60a:	1c bc       	out	0x2c, r1	; 44
 60c:	1f bc       	out	0x2f, r1	; 47
 60e:	8d e0       	ldi	r24, 0x0D	; 13
 610:	8e bd       	out	0x2e, r24	; 46
 612:	89 b7       	in	r24, 0x39	; 57
 614:	80 61       	ori	r24, 0x10	; 16
 616:	89 bf       	out	0x39, r24	; 57
 618:	08 95       	ret

0000061a <SetDoorState>:
 61a:	cf 93       	push	r28
 61c:	df 93       	push	r29
 61e:	d8 2f       	mov	r29, r24
 620:	c6 2f       	mov	r28, r22
 622:	0e 94 88 02 	call	0x510	; 0x510 <EnterAtomic>
 626:	6c 2f       	mov	r22, r28
 628:	70 e0       	ldi	r23, 0x00	; 0
 62a:	8d 2f       	mov	r24, r29
 62c:	80 73       	andi	r24, 0x30	; 48
 62e:	66 0f       	add	r22, r22
 630:	77 1f       	adc	r23, r23
 632:	fb 01       	movw	r30, r22
 634:	e6 58       	subi	r30, 0x86	; 134
 636:	fe 4f       	sbci	r31, 0xFE	; 254
 638:	90 81       	ld	r25, Z
 63a:	98 23       	and	r25, r24
 63c:	11 f4       	brne	.+4      	; 0x642 <SetDoorState+0x28>
 63e:	94 e0       	ldi	r25, 0x04	; 4
 640:	91 83       	std	Z+1, r25	; 0x01
 642:	fb 01       	movw	r30, r22
 644:	e6 58       	subi	r30, 0x86	; 134
 646:	fe 4f       	sbci	r31, 0xFE	; 254
 648:	81 60       	ori	r24, 0x01	; 1
 64a:	80 83       	st	Z, r24
 64c:	df 91       	pop	r29
 64e:	cf 91       	pop	r28
 650:	0c 94 8f 02 	jmp	0x51e	; 0x51e <LeaveAtomic>

00000654 <MoveElevator>:
 654:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <Elevator+0x1>
 658:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <Elevator+0x4>
 65c:	70 93 87 00 	sts	0x0087, r23	; 0x800087 <Elevator+0x6>
 660:	60 93 86 00 	sts	0x0086, r22	; 0x800086 <Elevator+0x5>
 664:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <Elevator>
 668:	98 17       	cp	r25, r24
 66a:	10 f4       	brcc	.+4      	; 0x670 <MoveElevator+0x1c>
 66c:	81 e0       	ldi	r24, 0x01	; 1
 66e:	03 c0       	rjmp	.+6      	; 0x676 <MoveElevator+0x22>
 670:	89 17       	cp	r24, r25
 672:	18 f4       	brcc	.+6      	; 0x67a <MoveElevator+0x26>
 674:	8f ef       	ldi	r24, 0xFF	; 255
 676:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <Elevator+0x4>
 67a:	08 95       	ret

0000067c <CalibrateElevatorPosition>:
 67c:	bc 01       	movw	r22, r24
 67e:	80 e0       	ldi	r24, 0x00	; 0
 680:	0c 94 2a 03 	jmp	0x654	; 0x654 <MoveElevator>

00000684 <SetDisplay>:
 684:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <liftDisplay7Seg>
 688:	08 95       	ret

0000068a <SetIndicatorFloorState>:
 68a:	84 30       	cpi	r24, 0x04	; 4
 68c:	70 f4       	brcc	.+28     	; 0x6aa <SetIndicatorFloorState+0x20>
 68e:	21 e0       	ldi	r18, 0x01	; 1
 690:	30 e0       	ldi	r19, 0x00	; 0
 692:	a9 01       	movw	r20, r18
 694:	02 c0       	rjmp	.+4      	; 0x69a <SetIndicatorFloorState+0x10>
 696:	44 0f       	add	r20, r20
 698:	55 1f       	adc	r21, r21
 69a:	8a 95       	dec	r24
 69c:	e2 f7       	brpl	.-8      	; 0x696 <SetIndicatorFloorState+0xc>
 69e:	ca 01       	movw	r24, r20
 6a0:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <displayCache>
 6a4:	89 2b       	or	r24, r25
 6a6:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <displayCache>
 6aa:	08 95       	ret

000006ac <SetIndicatorElevatorState>:
 6ac:	84 30       	cpi	r24, 0x04	; 4
 6ae:	68 f4       	brcc	.+26     	; 0x6ca <SetIndicatorElevatorState+0x1e>
 6b0:	24 e0       	ldi	r18, 0x04	; 4
 6b2:	28 0f       	add	r18, r24
 6b4:	81 e0       	ldi	r24, 0x01	; 1
 6b6:	90 e0       	ldi	r25, 0x00	; 0
 6b8:	01 c0       	rjmp	.+2      	; 0x6bc <SetIndicatorElevatorState+0x10>
 6ba:	88 0f       	add	r24, r24
 6bc:	2a 95       	dec	r18
 6be:	ea f7       	brpl	.-6      	; 0x6ba <SetIndicatorElevatorState+0xe>
 6c0:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <displayCache>
 6c4:	89 2b       	or	r24, r25
 6c6:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <displayCache>
 6ca:	08 95       	ret

000006cc <ClrIndicatorFloorState>:
 6cc:	84 30       	cpi	r24, 0x04	; 4
 6ce:	78 f4       	brcc	.+30     	; 0x6ee <ClrIndicatorFloorState+0x22>
 6d0:	21 e0       	ldi	r18, 0x01	; 1
 6d2:	30 e0       	ldi	r19, 0x00	; 0
 6d4:	a9 01       	movw	r20, r18
 6d6:	02 c0       	rjmp	.+4      	; 0x6dc <ClrIndicatorFloorState+0x10>
 6d8:	44 0f       	add	r20, r20
 6da:	55 1f       	adc	r21, r21
 6dc:	8a 95       	dec	r24
 6de:	e2 f7       	brpl	.-8      	; 0x6d8 <ClrIndicatorFloorState+0xc>
 6e0:	ca 01       	movw	r24, r20
 6e2:	80 95       	com	r24
 6e4:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <displayCache>
 6e8:	89 23       	and	r24, r25
 6ea:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <displayCache>
 6ee:	08 95       	ret

000006f0 <ClrIndicatorElevatorState>:
 6f0:	84 30       	cpi	r24, 0x04	; 4
 6f2:	70 f4       	brcc	.+28     	; 0x710 <ClrIndicatorElevatorState+0x20>
 6f4:	24 e0       	ldi	r18, 0x04	; 4
 6f6:	28 0f       	add	r18, r24
 6f8:	81 e0       	ldi	r24, 0x01	; 1
 6fa:	90 e0       	ldi	r25, 0x00	; 0
 6fc:	01 c0       	rjmp	.+2      	; 0x700 <ClrIndicatorElevatorState+0x10>
 6fe:	88 0f       	add	r24, r24
 700:	2a 95       	dec	r18
 702:	ea f7       	brpl	.-6      	; 0x6fe <ClrIndicatorElevatorState+0xe>
 704:	80 95       	com	r24
 706:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <displayCache>
 70a:	89 23       	and	r24, r25
 70c:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <displayCache>
 710:	08 95       	ret

00000712 <RegisterTestHandler>:
 712:	90 93 3c 01 	sts	0x013C, r25	; 0x80013c <_testHandler+0x1>
 716:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <_testHandler>
 71a:	08 95       	ret

0000071c <Usart_Init>:
 71c:	10 bc       	out	0x20, r1	; 32
 71e:	8c e0       	ldi	r24, 0x0C	; 12
 720:	89 b9       	out	0x09, r24	; 9
 722:	86 e8       	ldi	r24, 0x86	; 134
 724:	80 bd       	out	0x20, r24	; 32
 726:	88 e9       	ldi	r24, 0x98	; 152
 728:	8a b9       	out	0x0a, r24	; 10
 72a:	78 94       	sei
 72c:	08 95       	ret

0000072e <InitializePorts>:
 72e:	8f ef       	ldi	r24, 0xFF	; 255
 730:	87 bb       	out	0x17, r24	; 23
 732:	84 bb       	out	0x14, r24	; 20
 734:	8a bb       	out	0x1a, r24	; 26
 736:	11 ba       	out	0x11, r1	; 17
 738:	0e 94 8e 03 	call	0x71c	; 0x71c <Usart_Init>
 73c:	85 b7       	in	r24, 0x35	; 53
 73e:	83 60       	ori	r24, 0x03	; 3
 740:	85 bf       	out	0x35, r24	; 53
 742:	8b b7       	in	r24, 0x3b	; 59
 744:	80 64       	ori	r24, 0x40	; 64
 746:	8b bf       	out	0x3b, r24	; 59
 748:	08 95       	ret

0000074a <Usart_PutChar>:
 74a:	8c b9       	out	0x0c, r24	; 12
 74c:	5d 9b       	sbis	0x0b, 5	; 11
 74e:	fe cf       	rjmp	.-4      	; 0x74c <Usart_PutChar+0x2>
 750:	08 95       	ret

00000752 <SendEvent>:
 752:	0f 93       	push	r16
 754:	1f 93       	push	r17
 756:	cf 93       	push	r28
 758:	df 93       	push	r29
 75a:	c8 2f       	mov	r28, r24
 75c:	06 2f       	mov	r16, r22
 75e:	d4 2f       	mov	r29, r20
 760:	12 2f       	mov	r17, r18
 762:	0e 94 88 02 	call	0x510	; 0x510 <EnterAtomic>
 766:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <msgQ_in>
 76a:	e8 2f       	mov	r30, r24
 76c:	f0 e0       	ldi	r31, 0x00	; 0
 76e:	af 01       	movw	r20, r30
 770:	4f 5f       	subi	r20, 0xFF	; 255
 772:	5f 4f       	sbci	r21, 0xFF	; 255
 774:	4f 71       	andi	r20, 0x1F	; 31
 776:	55 27       	eor	r21, r21
 778:	20 91 b3 00 	lds	r18, 0x00B3	; 0x8000b3 <msgQ_out>
 77c:	30 e0       	ldi	r19, 0x00	; 0
 77e:	42 17       	cp	r20, r18
 780:	53 07       	cpc	r21, r19
 782:	71 f4       	brne	.+28     	; 0x7a0 <SendEvent+0x4e>
 784:	8f ef       	ldi	r24, 0xFF	; 255
 786:	0e 94 a5 03 	call	0x74a	; 0x74a <Usart_PutChar>
 78a:	80 e0       	ldi	r24, 0x00	; 0
 78c:	0e 94 a5 03 	call	0x74a	; 0x74a <Usart_PutChar>
 790:	8f ef       	ldi	r24, 0xFF	; 255
 792:	0e 94 a5 03 	call	0x74a	; 0x74a <Usart_PutChar>
 796:	8e ed       	ldi	r24, 0xDE	; 222
 798:	0e 94 a5 03 	call	0x74a	; 0x74a <Usart_PutChar>
 79c:	8d ea       	ldi	r24, 0xAD	; 173
 79e:	f9 cf       	rjmp	.-14     	; 0x792 <SendEvent+0x40>
 7a0:	ee 0f       	add	r30, r30
 7a2:	ff 1f       	adc	r31, r31
 7a4:	ee 0f       	add	r30, r30
 7a6:	ff 1f       	adc	r31, r31
 7a8:	eb 54       	subi	r30, 0x4B	; 75
 7aa:	ff 4f       	sbci	r31, 0xFF	; 255
 7ac:	01 83       	std	Z+1, r16	; 0x01
 7ae:	13 83       	std	Z+3, r17	; 0x03
 7b0:	d2 83       	std	Z+2, r29	; 0x02
 7b2:	c0 83       	st	Z, r28
 7b4:	8f 5f       	subi	r24, 0xFF	; 255
 7b6:	8f 71       	andi	r24, 0x1F	; 31
 7b8:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <msgQ_in>
 7bc:	df 91       	pop	r29
 7be:	cf 91       	pop	r28
 7c0:	1f 91       	pop	r17
 7c2:	0f 91       	pop	r16
 7c4:	0c 94 8f 02 	jmp	0x51e	; 0x51e <LeaveAtomic>

000007c8 <MakeDoorStates>:
 7c8:	df 92       	push	r13
 7ca:	ef 92       	push	r14
 7cc:	ff 92       	push	r15
 7ce:	0f 93       	push	r16
 7d0:	1f 93       	push	r17
 7d2:	cf 93       	push	r28
 7d4:	df 93       	push	r29
 7d6:	ca e7       	ldi	r28, 0x7A	; 122
 7d8:	d1 e0       	ldi	r29, 0x01	; 1
 7da:	00 e0       	ldi	r16, 0x00	; 0
 7dc:	10 e0       	ldi	r17, 0x00	; 0
 7de:	ee 24       	eor	r14, r14
 7e0:	e3 94       	inc	r14
 7e2:	f1 2c       	mov	r15, r1
 7e4:	89 81       	ldd	r24, Y+1	; 0x01
 7e6:	81 11       	cpse	r24, r1
 7e8:	24 c0       	rjmp	.+72     	; 0x832 <MakeDoorStates+0x6a>
 7ea:	48 81       	ld	r20, Y
 7ec:	40 ff       	sbrs	r20, 0
 7ee:	23 c0       	rjmp	.+70     	; 0x836 <MakeDoorStates+0x6e>
 7f0:	4e 7f       	andi	r20, 0xFE	; 254
 7f2:	48 83       	st	Y, r20
 7f4:	20 2f       	mov	r18, r16
 7f6:	65 ec       	ldi	r22, 0xC5	; 197
 7f8:	80 e1       	ldi	r24, 0x10	; 16
 7fa:	0e 94 a9 03 	call	0x752	; 0x752 <SendEvent>
 7fe:	88 81       	ld	r24, Y
 800:	40 91 37 01 	lds	r20, 0x0137	; 0x800137 <OpenDoors>
 804:	84 ff       	sbrs	r24, 4
 806:	0a c0       	rjmp	.+20     	; 0x81c <MakeDoorStates+0x54>
 808:	97 01       	movw	r18, r14
 80a:	00 2e       	mov	r0, r16
 80c:	01 c0       	rjmp	.+2      	; 0x810 <MakeDoorStates+0x48>
 80e:	22 0f       	add	r18, r18
 810:	0a 94       	dec	r0
 812:	ea f7       	brpl	.-6      	; 0x80e <MakeDoorStates+0x46>
 814:	24 2b       	or	r18, r20
 816:	20 93 37 01 	sts	0x0137, r18	; 0x800137 <OpenDoors>
 81a:	0d c0       	rjmp	.+26     	; 0x836 <MakeDoorStates+0x6e>
 81c:	c7 01       	movw	r24, r14
 81e:	00 2e       	mov	r0, r16
 820:	01 c0       	rjmp	.+2      	; 0x824 <MakeDoorStates+0x5c>
 822:	88 0f       	add	r24, r24
 824:	0a 94       	dec	r0
 826:	ea f7       	brpl	.-6      	; 0x822 <MakeDoorStates+0x5a>
 828:	80 95       	com	r24
 82a:	84 23       	and	r24, r20
 82c:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <OpenDoors>
 830:	02 c0       	rjmp	.+4      	; 0x836 <MakeDoorStates+0x6e>
 832:	81 50       	subi	r24, 0x01	; 1
 834:	89 83       	std	Y+1, r24	; 0x01
 836:	0f 5f       	subi	r16, 0xFF	; 255
 838:	1f 4f       	sbci	r17, 0xFF	; 255
 83a:	22 96       	adiw	r28, 0x02	; 2
 83c:	04 30       	cpi	r16, 0x04	; 4
 83e:	11 05       	cpc	r17, r1
 840:	89 f6       	brne	.-94     	; 0x7e4 <MakeDoorStates+0x1c>
 842:	df 91       	pop	r29
 844:	cf 91       	pop	r28
 846:	1f 91       	pop	r17
 848:	0f 91       	pop	r16
 84a:	ff 90       	pop	r15
 84c:	ef 90       	pop	r14
 84e:	df 90       	pop	r13
 850:	08 95       	ret

00000852 <ProcessMessage>:
 852:	db 01       	movw	r26, r22
 854:	82 30       	cpi	r24, 0x02	; 2
 856:	b1 f5       	brne	.+108    	; 0x8c4 <__stack+0x65>
 858:	8c 91       	ld	r24, X
 85a:	98 2f       	mov	r25, r24
 85c:	90 72       	andi	r25, 0x20	; 32
 85e:	28 2f       	mov	r18, r24
 860:	20 76       	andi	r18, 0x60	; 96
 862:	d9 f1       	breq	.+118    	; 0x8da <__stack+0x7b>
 864:	21 e0       	ldi	r18, 0x01	; 1
 866:	38 2f       	mov	r19, r24
 868:	30 71       	andi	r19, 0x10	; 16
 86a:	84 ff       	sbrs	r24, 4
 86c:	20 e0       	ldi	r18, 0x00	; 0
 86e:	99 23       	and	r25, r25
 870:	11 f0       	breq	.+4      	; 0x876 <__stack+0x17>
 872:	94 e0       	ldi	r25, 0x04	; 4
 874:	01 c0       	rjmp	.+2      	; 0x878 <__stack+0x19>
 876:	90 e0       	ldi	r25, 0x00	; 0
 878:	8f 70       	andi	r24, 0x0F	; 15
 87a:	89 0f       	add	r24, r25
 87c:	41 e0       	ldi	r20, 0x01	; 1
 87e:	50 e0       	ldi	r21, 0x00	; 0
 880:	02 c0       	rjmp	.+4      	; 0x886 <__stack+0x27>
 882:	44 0f       	add	r20, r20
 884:	55 1f       	adc	r21, r21
 886:	8a 95       	dec	r24
 888:	e2 f7       	brpl	.-8      	; 0x882 <__stack+0x23>
 88a:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <ButtonState>
 88e:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <ButtonState+0x1>
 892:	ba 01       	movw	r22, r20
 894:	60 95       	com	r22
 896:	70 95       	com	r23
 898:	86 23       	and	r24, r22
 89a:	97 23       	and	r25, r23
 89c:	90 93 3a 01 	sts	0x013A, r25	; 0x80013a <ButtonState+0x1>
 8a0:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <ButtonState>
 8a4:	33 23       	and	r19, r19
 8a6:	51 f0       	breq	.+20     	; 0x8bc <__stack+0x5d>
 8a8:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <ButtonState>
 8ac:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <ButtonState+0x1>
 8b0:	84 2b       	or	r24, r20
 8b2:	95 2b       	or	r25, r21
 8b4:	90 93 3a 01 	sts	0x013A, r25	; 0x80013a <ButtonState+0x1>
 8b8:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <ButtonState>
 8bc:	67 ec       	ldi	r22, 0xC7	; 199
 8be:	81 e0       	ldi	r24, 0x01	; 1
 8c0:	0c 94 a9 03 	jmp	0x752	; 0x752 <SendEvent>
 8c4:	83 30       	cpi	r24, 0x03	; 3
 8c6:	49 f4       	brne	.+18     	; 0x8da <__stack+0x7b>
 8c8:	e0 91 3b 01 	lds	r30, 0x013B	; 0x80013b <_testHandler>
 8cc:	f0 91 3c 01 	lds	r31, 0x013C	; 0x80013c <_testHandler+0x1>
 8d0:	30 97       	sbiw	r30, 0x00	; 0
 8d2:	19 f0       	breq	.+6      	; 0x8da <__stack+0x7b>
 8d4:	64 2f       	mov	r22, r20
 8d6:	cd 01       	movw	r24, r26
 8d8:	09 94       	ijmp
 8da:	08 95       	ret

000008dc <HandleMessage>:
 8dc:	90 91 b2 00 	lds	r25, 0x00B2	; 0x8000b2 <msgType.1871>
 8e0:	91 11       	cpse	r25, r1
 8e2:	05 c0       	rjmp	.+10     	; 0x8ee <HandleMessage+0x12>
 8e4:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <msgType.1871>
 8e8:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <msgLen.1872>
 8ec:	08 95       	ret
 8ee:	40 91 b1 00 	lds	r20, 0x00B1	; 0x8000b1 <msgLen.1872>
 8f2:	41 11       	cpse	r20, r1
 8f4:	04 c0       	rjmp	.+8      	; 0x8fe <HandleMessage+0x22>
 8f6:	82 50       	subi	r24, 0x02	; 2
 8f8:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <msgLen.1872>
 8fc:	15 c0       	rjmp	.+42     	; 0x928 <HandleMessage+0x4c>
 8fe:	e0 91 b0 00 	lds	r30, 0x00B0	; 0x8000b0 <bufferIndex.1870>
 902:	e4 17       	cp	r30, r20
 904:	98 f4       	brcc	.+38     	; 0x92c <HandleMessage+0x50>
 906:	21 e0       	ldi	r18, 0x01	; 1
 908:	2e 0f       	add	r18, r30
 90a:	20 93 b0 00 	sts	0x00B0, r18	; 0x8000b0 <bufferIndex.1870>
 90e:	f0 e0       	ldi	r31, 0x00	; 0
 910:	ee 55       	subi	r30, 0x5E	; 94
 912:	ff 4f       	sbci	r31, 0xFF	; 255
 914:	80 83       	st	Z, r24
 916:	42 13       	cpse	r20, r18
 918:	09 c0       	rjmp	.+18     	; 0x92c <HandleMessage+0x50>
 91a:	62 ea       	ldi	r22, 0xA2	; 162
 91c:	70 e0       	ldi	r23, 0x00	; 0
 91e:	89 2f       	mov	r24, r25
 920:	0e 94 29 04 	call	0x852	; 0x852 <ProcessMessage>
 924:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <msgType.1871>
 928:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <bufferIndex.1870>
 92c:	08 95       	ret

0000092e <SetInputOutput>:
 92e:	cf 93       	push	r28
 930:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <outputRefreshCounter.1884>
 934:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <outputRefreshCounter.1884+0x1>
 938:	01 96       	adiw	r24, 0x01	; 1
 93a:	90 93 a1 00 	sts	0x00A1, r25	; 0x8000a1 <outputRefreshCounter.1884+0x1>
 93e:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <outputRefreshCounter.1884>
 942:	83 70       	andi	r24, 0x03	; 3
 944:	99 27       	eor	r25, r25
 946:	89 2b       	or	r24, r25
 948:	21 f5       	brne	.+72     	; 0x992 <SetInputOutput+0x64>
 94a:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <doorRefreshCounter.1885>
 94e:	8f 5f       	subi	r24, 0xFF	; 255
 950:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <doorRefreshCounter.1885>
 954:	83 70       	andi	r24, 0x03	; 3
 956:	a8 2f       	mov	r26, r24
 958:	b0 e0       	ldi	r27, 0x00	; 0
 95a:	aa 0f       	add	r26, r26
 95c:	bb 1f       	adc	r27, r27
 95e:	a6 58       	subi	r26, 0x86	; 134
 960:	be 4f       	sbci	r27, 0xFE	; 254
 962:	11 96       	adiw	r26, 0x01	; 1
 964:	ec 91       	ld	r30, X
 966:	11 97       	sbiw	r26, 0x01	; 1
 968:	9c 91       	ld	r25, X
 96a:	94 ff       	sbrs	r25, 4
 96c:	03 c0       	rjmp	.+6      	; 0x974 <SetInputOutput+0x46>
 96e:	94 e0       	ldi	r25, 0x04	; 4
 970:	9e 1b       	sub	r25, r30
 972:	e9 2f       	mov	r30, r25
 974:	f0 e0       	ldi	r31, 0x00	; 0
 976:	e8 57       	subi	r30, 0x78	; 120
 978:	ff 4f       	sbci	r31, 0xFF	; 255
 97a:	21 e0       	ldi	r18, 0x01	; 1
 97c:	30 e0       	ldi	r19, 0x00	; 0
 97e:	a9 01       	movw	r20, r18
 980:	02 c0       	rjmp	.+4      	; 0x986 <SetInputOutput+0x58>
 982:	44 0f       	add	r20, r20
 984:	55 1f       	adc	r21, r21
 986:	8a 95       	dec	r24
 988:	e2 f7       	brpl	.-8      	; 0x982 <SetInputOutput+0x54>
 98a:	ca 01       	movw	r24, r20
 98c:	90 81       	ld	r25, Z
 98e:	89 2b       	or	r24, r25
 990:	85 bb       	out	0x15, r24	; 21
 992:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <buttonRefreshCounter.1886>
 996:	8f 5f       	subi	r24, 0xFF	; 255
 998:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <buttonRefreshCounter.1886>
 99c:	20 91 3f 01 	lds	r18, 0x013F	; 0x80013f <displayCache>
 9a0:	22 23       	and	r18, r18
 9a2:	01 f1       	breq	.+64     	; 0x9e4 <SetInputOutput+0xb6>
 9a4:	83 70       	andi	r24, 0x03	; 3
 9a6:	62 2f       	mov	r22, r18
 9a8:	70 e0       	ldi	r23, 0x00	; 0
 9aa:	40 e1       	ldi	r20, 0x10	; 16
 9ac:	50 e0       	ldi	r21, 0x00	; 0
 9ae:	08 2e       	mov	r0, r24
 9b0:	02 c0       	rjmp	.+4      	; 0x9b6 <SetInputOutput+0x88>
 9b2:	44 0f       	add	r20, r20
 9b4:	55 1f       	adc	r21, r21
 9b6:	0a 94       	dec	r0
 9b8:	e2 f7       	brpl	.-8      	; 0x9b2 <SetInputOutput+0x84>
 9ba:	46 23       	and	r20, r22
 9bc:	57 23       	and	r21, r23
 9be:	45 2b       	or	r20, r21
 9c0:	11 f0       	breq	.+4      	; 0x9c6 <SetInputOutput+0x98>
 9c2:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <buttonLiftLed>
 9c6:	08 2e       	mov	r0, r24
 9c8:	02 c0       	rjmp	.+4      	; 0x9ce <SetInputOutput+0xa0>
 9ca:	75 95       	asr	r23
 9cc:	67 95       	ror	r22
 9ce:	0a 94       	dec	r0
 9d0:	e2 f7       	brpl	.-8      	; 0x9ca <SetInputOutput+0x9c>
 9d2:	60 fd       	sbrc	r22, 0
 9d4:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <buttonFloorLed>
 9d8:	82 2f       	mov	r24, r18
 9da:	80 7f       	andi	r24, 0xF0	; 240
 9dc:	19 f0       	breq	.+6      	; 0x9e4 <SetInputOutput+0xb6>
 9de:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <buttonLiftLed_on>
 9e2:	01 c0       	rjmp	.+2      	; 0x9e6 <SetInputOutput+0xb8>
 9e4:	91 e0       	ldi	r25, 0x01	; 1
 9e6:	2f 70       	andi	r18, 0x0F	; 15
 9e8:	19 f0       	breq	.+6      	; 0x9f0 <SetInputOutput+0xc2>
 9ea:	20 91 41 01 	lds	r18, 0x0141	; 0x800141 <buttonFloorLed_On>
 9ee:	01 c0       	rjmp	.+2      	; 0x9f2 <SetInputOutput+0xc4>
 9f0:	21 e0       	ldi	r18, 0x01	; 1
 9f2:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <liftPosDisplay_On>
 9f6:	81 11       	cpse	r24, r1
 9f8:	04 c0       	rjmp	.+8      	; 0xa02 <SetInputOutput+0xd4>
 9fa:	30 91 81 00 	lds	r19, 0x0081	; 0x800081 <Elevator>
 9fe:	3f 73       	andi	r19, 0x3F	; 63
 a00:	01 c0       	rjmp	.+2      	; 0xa04 <SetInputOutput+0xd6>
 a02:	3f e3       	ldi	r19, 0x3F	; 63
 a04:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <liftDisplay7Seg_On>
 a08:	81 11       	cpse	r24, r1
 a0a:	03 c0       	rjmp	.+6      	; 0xa12 <SetInputOutput+0xe4>
 a0c:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <liftDisplay7Seg>
 a10:	01 c0       	rjmp	.+2      	; 0xa14 <SetInputOutput+0xe6>
 a12:	87 e0       	ldi	r24, 0x07	; 7
 a14:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <floorDisplayPort>
 a18:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <doorframe>
 a1c:	60 e4       	ldi	r22, 0x40	; 64
 a1e:	86 9f       	mul	r24, r22
 a20:	a0 01       	movw	r20, r0
 a22:	11 24       	eor	r1, r1
 a24:	60 e8       	ldi	r22, 0x80	; 128
 a26:	96 9f       	mul	r25, r22
 a28:	c0 01       	movw	r24, r0
 a2a:	11 24       	eor	r1, r1
 a2c:	84 2b       	or	r24, r20
 a2e:	83 2b       	or	r24, r19
 a30:	88 bb       	out	0x18, r24	; 24
 a32:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <buttonLiftLed>
 a36:	98 e0       	ldi	r25, 0x08	; 8
 a38:	89 9f       	mul	r24, r25
 a3a:	a0 01       	movw	r20, r0
 a3c:	11 24       	eor	r1, r1
 a3e:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <buttonFloorLed>
 a42:	30 e2       	ldi	r19, 0x20	; 32
 a44:	93 9f       	mul	r25, r19
 a46:	c0 01       	movw	r24, r0
 a48:	11 24       	eor	r1, r1
 a4a:	84 2b       	or	r24, r20
 a4c:	30 91 44 01 	lds	r19, 0x0144	; 0x800144 <floorDisplayPort>
 a50:	38 2b       	or	r19, r24
 a52:	40 e8       	ldi	r20, 0x80	; 128
 a54:	24 9f       	mul	r18, r20
 a56:	c0 01       	movw	r24, r0
 a58:	11 24       	eor	r1, r1
 a5a:	83 2b       	or	r24, r19
 a5c:	8b bb       	out	0x1b, r24	; 27
 a5e:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <USART_rxBufferOut>
 a62:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <USART_rxBufferIn>
 a66:	98 17       	cp	r25, r24
 a68:	b9 f0       	breq	.+46     	; 0xa98 <SetInputOutput+0x16a>
 a6a:	0e 94 88 02 	call	0x510	; 0x510 <EnterAtomic>
 a6e:	e0 91 58 01 	lds	r30, 0x0158	; 0x800158 <USART_rxBufferOut>
 a72:	81 e0       	ldi	r24, 0x01	; 1
 a74:	8e 0f       	add	r24, r30
 a76:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <USART_rxBufferOut>
 a7a:	f0 e0       	ldi	r31, 0x00	; 0
 a7c:	e6 5a       	subi	r30, 0xA6	; 166
 a7e:	fe 4f       	sbci	r31, 0xFE	; 254
 a80:	c0 81       	ld	r28, Z
 a82:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <USART_rxBufferOut>
 a86:	8f 71       	andi	r24, 0x1F	; 31
 a88:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <USART_rxBufferOut>
 a8c:	0e 94 8f 02 	call	0x51e	; 0x51e <LeaveAtomic>
 a90:	8c 2f       	mov	r24, r28
 a92:	0e 94 6e 04 	call	0x8dc	; 0x8dc <HandleMessage>
 a96:	e3 cf       	rjmp	.-58     	; 0xa5e <SetInputOutput+0x130>
 a98:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <terminalRefreshCounter.1887>
 a9c:	90 91 9d 00 	lds	r25, 0x009D	; 0x80009d <terminalRefreshCounter.1887+0x1>
 aa0:	9c 01       	movw	r18, r24
 aa2:	2f 5f       	subi	r18, 0xFF	; 255
 aa4:	3f 4f       	sbci	r19, 0xFF	; 255
 aa6:	30 93 9d 00 	sts	0x009D, r19	; 0x80009d <terminalRefreshCounter.1887+0x1>
 aaa:	20 93 9c 00 	sts	0x009C, r18	; 0x80009c <terminalRefreshCounter.1887>
 aae:	8f 3f       	cpi	r24, 0xFF	; 255
 ab0:	9f 40       	sbci	r25, 0x0F	; 15
 ab2:	c9 f4       	brne	.+50     	; 0xae6 <SetInputOutput+0x1b8>
 ab4:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <EnableStatusUpdate>
 ab8:	88 23       	and	r24, r24
 aba:	a9 f0       	breq	.+42     	; 0xae6 <SetInputOutput+0x1b8>
 abc:	84 e0       	ldi	r24, 0x04	; 4
 abe:	0e 94 a5 03 	call	0x74a	; 0x74a <Usart_PutChar>
 ac2:	86 e0       	ldi	r24, 0x06	; 6
 ac4:	0e 94 a5 03 	call	0x74a	; 0x74a <Usart_PutChar>
 ac8:	85 ea       	ldi	r24, 0xA5	; 165
 aca:	0e 94 a5 03 	call	0x74a	; 0x74a <Usart_PutChar>
 ace:	8a e5       	ldi	r24, 0x5A	; 90
 ad0:	0e 94 a5 03 	call	0x74a	; 0x74a <Usart_PutChar>
 ad4:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <SystemState>
 ad8:	0e 94 a5 03 	call	0x74a	; 0x74a <Usart_PutChar>
 adc:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <OpenDoors>
 ae0:	cf 91       	pop	r28
 ae2:	0c 94 a5 03 	jmp	0x74a	; 0x74a <Usart_PutChar>
 ae6:	cf 91       	pop	r28
 ae8:	08 95       	ret

00000aea <InitializeStart>:
 aea:	8a ec       	ldi	r24, 0xCA	; 202
 aec:	0e 94 a5 03 	call	0x74a	; 0x74a <Usart_PutChar>
 af0:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <liftPosDisplay_On>
 af4:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <buttonLiftLed_on>
 af8:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <liftDisplay7Seg_On>
 afc:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <buttonFloorLed_On>
 b00:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <doorframe>
 b04:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <liftDoorState+0x1>
 b08:	80 e2       	ldi	r24, 0x20	; 32
 b0a:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <liftDoorState>
 b0e:	10 92 7d 01 	sts	0x017D, r1	; 0x80017d <liftDoorState+0x3>
 b12:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <liftDoorState+0x2>
 b16:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <liftDoorState+0x5>
 b1a:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <liftDoorState+0x4>
 b1e:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <liftDoorState+0x7>
 b22:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <liftDoorState+0x6>
 b26:	8f e1       	ldi	r24, 0x1F	; 31
 b28:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <Elevator>
 b2c:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <Elevator+0x1>
 b30:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <InitializeCounter>
 b34:	20 e0       	ldi	r18, 0x00	; 0
 b36:	40 e0       	ldi	r20, 0x00	; 0
 b38:	61 ec       	ldi	r22, 0xC1	; 193
 b3a:	81 e0       	ldi	r24, 0x01	; 1
 b3c:	0e 94 a9 03 	call	0x752	; 0x752 <SendEvent>
 b40:	8e ef       	ldi	r24, 0xFE	; 254
 b42:	0e 94 a5 03 	call	0x74a	; 0x74a <Usart_PutChar>
 b46:	0e 94 bd 02 	call	0x57a	; 0x57a <DispatchEvent>
 b4a:	0e 94 97 04 	call	0x92e	; 0x92e <SetInputOutput>
 b4e:	fb cf       	rjmp	.-10     	; 0xb46 <InitializeStart+0x5c>

00000b50 <__vector_1>:
 b50:	1f 92       	push	r1
 b52:	0f 92       	push	r0
 b54:	0f b6       	in	r0, 0x3f	; 63
 b56:	0f 92       	push	r0
 b58:	11 24       	eor	r1, r1
 b5a:	2f 93       	push	r18
 b5c:	3f 93       	push	r19
 b5e:	4f 93       	push	r20
 b60:	5f 93       	push	r21
 b62:	6f 93       	push	r22
 b64:	7f 93       	push	r23
 b66:	8f 93       	push	r24
 b68:	9f 93       	push	r25
 b6a:	af 93       	push	r26
 b6c:	bf 93       	push	r27
 b6e:	ef 93       	push	r30
 b70:	ff 93       	push	r31
 b72:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <ButtonState>
 b76:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <ButtonState+0x1>
 b7a:	91 60       	ori	r25, 0x01	; 1
 b7c:	90 93 3a 01 	sts	0x013A, r25	; 0x80013a <ButtonState+0x1>
 b80:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <ButtonState>
 b84:	40 91 39 01 	lds	r20, 0x0139	; 0x800139 <ButtonState>
 b88:	50 91 3a 01 	lds	r21, 0x013A	; 0x80013a <ButtonState+0x1>
 b8c:	20 e0       	ldi	r18, 0x00	; 0
 b8e:	69 ec       	ldi	r22, 0xC9	; 201
 b90:	80 e1       	ldi	r24, 0x10	; 16
 b92:	0e 94 a9 03 	call	0x752	; 0x752 <SendEvent>
 b96:	ff 91       	pop	r31
 b98:	ef 91       	pop	r30
 b9a:	bf 91       	pop	r27
 b9c:	af 91       	pop	r26
 b9e:	9f 91       	pop	r25
 ba0:	8f 91       	pop	r24
 ba2:	7f 91       	pop	r23
 ba4:	6f 91       	pop	r22
 ba6:	5f 91       	pop	r21
 ba8:	4f 91       	pop	r20
 baa:	3f 91       	pop	r19
 bac:	2f 91       	pop	r18
 bae:	0f 90       	pop	r0
 bb0:	0f be       	out	0x3f, r0	; 63
 bb2:	0f 90       	pop	r0
 bb4:	1f 90       	pop	r1
 bb6:	18 95       	reti

00000bb8 <__vector_13>:
 bb8:	1f 92       	push	r1
 bba:	0f 92       	push	r0
 bbc:	0f b6       	in	r0, 0x3f	; 63
 bbe:	0f 92       	push	r0
 bc0:	11 24       	eor	r1, r1
 bc2:	2f 93       	push	r18
 bc4:	3f 93       	push	r19
 bc6:	8f 93       	push	r24
 bc8:	9f 93       	push	r25
 bca:	ef 93       	push	r30
 bcc:	ff 93       	push	r31
 bce:	5f 9b       	sbis	0x0b, 7	; 11
 bd0:	1e c0       	rjmp	.+60     	; 0xc0e <__vector_13+0x56>
 bd2:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <USART_rxBufferIn>
 bd6:	20 91 58 01 	lds	r18, 0x0158	; 0x800158 <USART_rxBufferOut>
 bda:	90 e0       	ldi	r25, 0x00	; 0
 bdc:	01 96       	adiw	r24, 0x01	; 1
 bde:	8f 71       	andi	r24, 0x1F	; 31
 be0:	99 27       	eor	r25, r25
 be2:	30 e0       	ldi	r19, 0x00	; 0
 be4:	82 17       	cp	r24, r18
 be6:	93 07       	cpc	r25, r19
 be8:	89 f0       	breq	.+34     	; 0xc0c <__vector_13+0x54>
 bea:	8c b1       	in	r24, 0x0c	; 12
 bec:	e0 91 59 01 	lds	r30, 0x0159	; 0x800159 <USART_rxBufferIn>
 bf0:	91 e0       	ldi	r25, 0x01	; 1
 bf2:	9e 0f       	add	r25, r30
 bf4:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <USART_rxBufferIn>
 bf8:	f0 e0       	ldi	r31, 0x00	; 0
 bfa:	e6 5a       	subi	r30, 0xA6	; 166
 bfc:	fe 4f       	sbci	r31, 0xFE	; 254
 bfe:	80 83       	st	Z, r24
 c00:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <USART_rxBufferIn>
 c04:	8f 71       	andi	r24, 0x1F	; 31
 c06:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <USART_rxBufferIn>
 c0a:	e1 cf       	rjmp	.-62     	; 0xbce <__vector_13+0x16>
 c0c:	57 98       	cbi	0x0a, 7	; 10
 c0e:	ff 91       	pop	r31
 c10:	ef 91       	pop	r30
 c12:	9f 91       	pop	r25
 c14:	8f 91       	pop	r24
 c16:	3f 91       	pop	r19
 c18:	2f 91       	pop	r18
 c1a:	0f 90       	pop	r0
 c1c:	0f be       	out	0x3f, r0	; 63
 c1e:	0f 90       	pop	r0
 c20:	1f 90       	pop	r1
 c22:	18 95       	reti

00000c24 <__vector_7>:
 c24:	1f 92       	push	r1
 c26:	0f 92       	push	r0
 c28:	0f b6       	in	r0, 0x3f	; 63
 c2a:	0f 92       	push	r0
 c2c:	11 24       	eor	r1, r1
 c2e:	2f 93       	push	r18
 c30:	3f 93       	push	r19
 c32:	4f 93       	push	r20
 c34:	5f 93       	push	r21
 c36:	6f 93       	push	r22
 c38:	7f 93       	push	r23
 c3a:	8f 93       	push	r24
 c3c:	9f 93       	push	r25
 c3e:	af 93       	push	r26
 c40:	bf 93       	push	r27
 c42:	ef 93       	push	r30
 c44:	ff 93       	push	r31
 c46:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <ElevatorTick.1962>
 c4a:	8f 5f       	subi	r24, 0xFF	; 255
 c4c:	80 93 9b 00 	sts	0x009B, r24	; 0x80009b <ElevatorTick.1962>
 c50:	90 91 9a 00 	lds	r25, 0x009A	; 0x80009a <__data_end>
 c54:	9f 5f       	subi	r25, 0xFF	; 255
 c56:	90 93 9a 00 	sts	0x009A, r25	; 0x80009a <__data_end>
 c5a:	60 91 83 00 	lds	r22, 0x0083	; 0x800083 <Elevator+0x2>
 c5e:	0e 94 1a 07 	call	0xe34	; 0xe34 <__udivmodqi4>
 c62:	91 11       	cpse	r25, r1
 c64:	14 c0       	rjmp	.+40     	; 0xc8e <__vector_7+0x6a>
 c66:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <Elevator>
 c6a:	60 91 82 00 	lds	r22, 0x0082	; 0x800082 <Elevator+0x1>
 c6e:	96 17       	cp	r25, r22
 c70:	61 f0       	breq	.+24     	; 0xc8a <__vector_7+0x66>
 c72:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <Elevator+0x4>
 c76:	89 0f       	add	r24, r25
 c78:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <Elevator>
 c7c:	e0 91 86 00 	lds	r30, 0x0086	; 0x800086 <Elevator+0x5>
 c80:	f0 91 87 00 	lds	r31, 0x0087	; 0x800087 <Elevator+0x6>
 c84:	30 97       	sbiw	r30, 0x00	; 0
 c86:	09 f0       	breq	.+2      	; 0xc8a <__vector_7+0x66>
 c88:	09 95       	icall
 c8a:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <ElevatorTick.1962>
 c8e:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <__data_end>
 c92:	6c e0       	ldi	r22, 0x0C	; 12
 c94:	0e 94 1a 07 	call	0xe34	; 0xe34 <__udivmodqi4>
 c98:	91 11       	cpse	r25, r1
 c9a:	04 c0       	rjmp	.+8      	; 0xca4 <__vector_7+0x80>
 c9c:	10 92 9a 00 	sts	0x009A, r1	; 0x80009a <__data_end>
 ca0:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <MakeDoorStates>
 ca4:	ff 91       	pop	r31
 ca6:	ef 91       	pop	r30
 ca8:	bf 91       	pop	r27
 caa:	af 91       	pop	r26
 cac:	9f 91       	pop	r25
 cae:	8f 91       	pop	r24
 cb0:	7f 91       	pop	r23
 cb2:	6f 91       	pop	r22
 cb4:	5f 91       	pop	r21
 cb6:	4f 91       	pop	r20
 cb8:	3f 91       	pop	r19
 cba:	2f 91       	pop	r18
 cbc:	0f 90       	pop	r0
 cbe:	0f be       	out	0x3f, r0	; 63
 cc0:	0f 90       	pop	r0
 cc2:	1f 90       	pop	r1
 cc4:	18 95       	reti

00000cc6 <StartTimer>:
 cc6:	ff 92       	push	r15
 cc8:	0f 93       	push	r16
 cca:	1f 93       	push	r17
 ccc:	cf 93       	push	r28
 cce:	df 93       	push	r29
 cd0:	f0 90 57 01 	lds	r15, 0x0157	; 0x800157 <UsedTimers>
 cd4:	2f 2d       	mov	r18, r15
 cd6:	30 e0       	ldi	r19, 0x00	; 0
 cd8:	c0 e0       	ldi	r28, 0x00	; 0
 cda:	d0 e0       	ldi	r29, 0x00	; 0
 cdc:	a9 01       	movw	r20, r18
 cde:	0c 2e       	mov	r0, r28
 ce0:	02 c0       	rjmp	.+4      	; 0xce6 <StartTimer+0x20>
 ce2:	55 95       	asr	r21
 ce4:	47 95       	ror	r20
 ce6:	0a 94       	dec	r0
 ce8:	e2 f7       	brpl	.-8      	; 0xce2 <StartTimer+0x1c>
 cea:	40 fd       	sbrc	r20, 0
 cec:	18 c0       	rjmp	.+48     	; 0xd1e <StartTimer+0x58>
 cee:	8c 01       	movw	r16, r24
 cf0:	0e 94 88 02 	call	0x510	; 0x510 <EnterAtomic>
 cf4:	21 e0       	ldi	r18, 0x01	; 1
 cf6:	30 e0       	ldi	r19, 0x00	; 0
 cf8:	0c 2e       	mov	r0, r28
 cfa:	01 c0       	rjmp	.+2      	; 0xcfe <StartTimer+0x38>
 cfc:	22 0f       	add	r18, r18
 cfe:	0a 94       	dec	r0
 d00:	ea f7       	brpl	.-6      	; 0xcfc <StartTimer+0x36>
 d02:	2f 29       	or	r18, r15
 d04:	20 93 57 01 	sts	0x0157, r18	; 0x800157 <UsedTimers>
 d08:	fe 01       	movw	r30, r28
 d0a:	ee 0f       	add	r30, r30
 d0c:	ff 1f       	adc	r31, r31
 d0e:	e9 5b       	subi	r30, 0xB9	; 185
 d10:	fe 4f       	sbci	r31, 0xFE	; 254
 d12:	11 83       	std	Z+1, r17	; 0x01
 d14:	00 83       	st	Z, r16
 d16:	0e 94 8f 02 	call	0x51e	; 0x51e <LeaveAtomic>
 d1a:	8c 2f       	mov	r24, r28
 d1c:	05 c0       	rjmp	.+10     	; 0xd28 <StartTimer+0x62>
 d1e:	21 96       	adiw	r28, 0x01	; 1
 d20:	c8 30       	cpi	r28, 0x08	; 8
 d22:	d1 05       	cpc	r29, r1
 d24:	d9 f6       	brne	.-74     	; 0xcdc <StartTimer+0x16>
 d26:	8f ef       	ldi	r24, 0xFF	; 255
 d28:	df 91       	pop	r29
 d2a:	cf 91       	pop	r28
 d2c:	1f 91       	pop	r17
 d2e:	0f 91       	pop	r16
 d30:	ff 90       	pop	r15
 d32:	08 95       	ret

00000d34 <StopTimer>:
 d34:	cf 93       	push	r28
 d36:	88 30       	cpi	r24, 0x08	; 8
 d38:	d0 f4       	brcc	.+52     	; 0xd6e <StopTimer+0x3a>
 d3a:	c8 2f       	mov	r28, r24
 d3c:	0e 94 88 02 	call	0x510	; 0x510 <EnterAtomic>
 d40:	ec 2f       	mov	r30, r28
 d42:	f0 e0       	ldi	r31, 0x00	; 0
 d44:	81 e0       	ldi	r24, 0x01	; 1
 d46:	90 e0       	ldi	r25, 0x00	; 0
 d48:	01 c0       	rjmp	.+2      	; 0xd4c <StopTimer+0x18>
 d4a:	88 0f       	add	r24, r24
 d4c:	ca 95       	dec	r28
 d4e:	ea f7       	brpl	.-6      	; 0xd4a <StopTimer+0x16>
 d50:	80 95       	com	r24
 d52:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <UsedTimers>
 d56:	89 23       	and	r24, r25
 d58:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <UsedTimers>
 d5c:	ee 0f       	add	r30, r30
 d5e:	ff 1f       	adc	r31, r31
 d60:	e9 5b       	subi	r30, 0xB9	; 185
 d62:	fe 4f       	sbci	r31, 0xFE	; 254
 d64:	11 82       	std	Z+1, r1	; 0x01
 d66:	10 82       	st	Z, r1
 d68:	cf 91       	pop	r28
 d6a:	0c 94 8f 02 	jmp	0x51e	; 0x51e <LeaveAtomic>
 d6e:	cf 91       	pop	r28
 d70:	08 95       	ret

00000d72 <__vector_10>:
 d72:	1f 92       	push	r1
 d74:	0f 92       	push	r0
 d76:	0f b6       	in	r0, 0x3f	; 63
 d78:	0f 92       	push	r0
 d7a:	11 24       	eor	r1, r1
 d7c:	cf 92       	push	r12
 d7e:	df 92       	push	r13
 d80:	ff 92       	push	r15
 d82:	0f 93       	push	r16
 d84:	1f 93       	push	r17
 d86:	2f 93       	push	r18
 d88:	3f 93       	push	r19
 d8a:	4f 93       	push	r20
 d8c:	5f 93       	push	r21
 d8e:	6f 93       	push	r22
 d90:	7f 93       	push	r23
 d92:	8f 93       	push	r24
 d94:	9f 93       	push	r25
 d96:	af 93       	push	r26
 d98:	bf 93       	push	r27
 d9a:	cf 93       	push	r28
 d9c:	df 93       	push	r29
 d9e:	ef 93       	push	r30
 da0:	ff 93       	push	r31
 da2:	07 e4       	ldi	r16, 0x47	; 71
 da4:	11 e0       	ldi	r17, 0x01	; 1
 da6:	c0 e0       	ldi	r28, 0x00	; 0
 da8:	d0 e0       	ldi	r29, 0x00	; 0
 daa:	cc 24       	eor	r12, r12
 dac:	c3 94       	inc	r12
 dae:	d1 2c       	mov	r13, r1
 db0:	f0 90 57 01 	lds	r15, 0x0157	; 0x800157 <UsedTimers>
 db4:	8f 2d       	mov	r24, r15
 db6:	90 e0       	ldi	r25, 0x00	; 0
 db8:	0c 2e       	mov	r0, r28
 dba:	02 c0       	rjmp	.+4      	; 0xdc0 <__vector_10+0x4e>
 dbc:	95 95       	asr	r25
 dbe:	87 95       	ror	r24
 dc0:	0a 94       	dec	r0
 dc2:	e2 f7       	brpl	.-8      	; 0xdbc <__vector_10+0x4a>
 dc4:	80 ff       	sbrs	r24, 0
 dc6:	18 c0       	rjmp	.+48     	; 0xdf8 <__vector_10+0x86>
 dc8:	f8 01       	movw	r30, r16
 dca:	80 81       	ld	r24, Z
 dcc:	91 81       	ldd	r25, Z+1	; 0x01
 dce:	01 97       	sbiw	r24, 0x01	; 1
 dd0:	91 83       	std	Z+1, r25	; 0x01
 dd2:	80 83       	st	Z, r24
 dd4:	89 2b       	or	r24, r25
 dd6:	81 f4       	brne	.+32     	; 0xdf8 <__vector_10+0x86>
 dd8:	20 e0       	ldi	r18, 0x00	; 0
 dda:	40 e0       	ldi	r20, 0x00	; 0
 ddc:	68 ec       	ldi	r22, 0xC8	; 200
 dde:	81 e0       	ldi	r24, 0x01	; 1
 de0:	0e 94 a9 03 	call	0x752	; 0x752 <SendEvent>
 de4:	c6 01       	movw	r24, r12
 de6:	0c 2e       	mov	r0, r28
 de8:	01 c0       	rjmp	.+2      	; 0xdec <__vector_10+0x7a>
 dea:	88 0f       	add	r24, r24
 dec:	0a 94       	dec	r0
 dee:	ea f7       	brpl	.-6      	; 0xdea <__vector_10+0x78>
 df0:	80 95       	com	r24
 df2:	f8 22       	and	r15, r24
 df4:	f0 92 57 01 	sts	0x0157, r15	; 0x800157 <UsedTimers>
 df8:	21 96       	adiw	r28, 0x01	; 1
 dfa:	0e 5f       	subi	r16, 0xFE	; 254
 dfc:	1f 4f       	sbci	r17, 0xFF	; 255
 dfe:	c8 30       	cpi	r28, 0x08	; 8
 e00:	d1 05       	cpc	r29, r1
 e02:	b1 f6       	brne	.-84     	; 0xdb0 <__vector_10+0x3e>
 e04:	ff 91       	pop	r31
 e06:	ef 91       	pop	r30
 e08:	df 91       	pop	r29
 e0a:	cf 91       	pop	r28
 e0c:	bf 91       	pop	r27
 e0e:	af 91       	pop	r26
 e10:	9f 91       	pop	r25
 e12:	8f 91       	pop	r24
 e14:	7f 91       	pop	r23
 e16:	6f 91       	pop	r22
 e18:	5f 91       	pop	r21
 e1a:	4f 91       	pop	r20
 e1c:	3f 91       	pop	r19
 e1e:	2f 91       	pop	r18
 e20:	1f 91       	pop	r17
 e22:	0f 91       	pop	r16
 e24:	ff 90       	pop	r15
 e26:	df 90       	pop	r13
 e28:	cf 90       	pop	r12
 e2a:	0f 90       	pop	r0
 e2c:	0f be       	out	0x3f, r0	; 63
 e2e:	0f 90       	pop	r0
 e30:	1f 90       	pop	r1
 e32:	18 95       	reti

00000e34 <__udivmodqi4>:
 e34:	99 1b       	sub	r25, r25
 e36:	79 e0       	ldi	r23, 0x09	; 9
 e38:	04 c0       	rjmp	.+8      	; 0xe42 <__udivmodqi4_ep>

00000e3a <__udivmodqi4_loop>:
 e3a:	99 1f       	adc	r25, r25
 e3c:	96 17       	cp	r25, r22
 e3e:	08 f0       	brcs	.+2      	; 0xe42 <__udivmodqi4_ep>
 e40:	96 1b       	sub	r25, r22

00000e42 <__udivmodqi4_ep>:
 e42:	88 1f       	adc	r24, r24
 e44:	7a 95       	dec	r23
 e46:	c9 f7       	brne	.-14     	; 0xe3a <__udivmodqi4_loop>
 e48:	80 95       	com	r24
 e4a:	08 95       	ret

00000e4c <_exit>:
 e4c:	f8 94       	cli

00000e4e <__stop_program>:
 e4e:	ff cf       	rjmp	.-2      	; 0xe4e <__stop_program>
