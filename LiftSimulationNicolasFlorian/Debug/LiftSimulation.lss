
LiftSimulation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c5c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000034  00800060  00000c5c  00000cf0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000e8  00800094  00800094  00000d24  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  00000d24  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000d84  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000228  00000000  00000000  00000dc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002bec  00000000  00000000  00000fe8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eba  00000000  00000000  00003bd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001227  00000000  00000000  00004a8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000618  00000000  00000000  00005cb8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000010eb  00000000  00000000  000062d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000162c  00000000  00000000  000073bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d8  00000000  00000000  000089e7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 cd 04 	jmp	0x99a	; 0x99a <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 37 05 	jmp	0xa6e	; 0xa6e <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 bf 05 	jmp	0xb7e	; 0xb7e <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 01 05 	jmp	0xa02	; 0xa02 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e5       	ldi	r30, 0x5C	; 92
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 39       	cpi	r26, 0x94	; 148
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a4 e9       	ldi	r26, 0x94	; 148
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 37       	cpi	r26, 0x7C	; 124
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 2c 06 	jmp	0xc58	; 0xc58 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:



int main(void)
{
    InitializePorts();
  92:	0e 94 bc 02 	call	0x578	; 0x578 <InitializePorts>
	Usart_Init();
  96:	0e 94 b3 02 	call	0x566	; 0x566 <Usart_Init>
	RegisterTestHandler( TestFunction );
  9a:	84 eb       	ldi	r24, 0xB4	; 180
  9c:	91 e0       	ldi	r25, 0x01	; 1
  9e:	0e 94 ae 02 	call	0x55c	; 0x55c <RegisterTestHandler>
	RegisterFsm(&_motorCtrl.fsm);
  a2:	8f e6       	ldi	r24, 0x6F	; 111
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	0e 94 ee 01 	call	0x3dc	; 0x3dc <RegisterFsm>
	RegisterFsm(&_mainCtrl.fsm);
  aa:	80 e6       	ldi	r24, 0x60	; 96
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	0e 94 ee 01 	call	0x3dc	; 0x3dc <RegisterFsm>
	// letzte Funktion die aufgerufen wird!
	InitializeStart();
  b2:	0e 94 9a 04 	call	0x934	; 0x934 <InitializeStart>
}
  b6:	80 e0       	ldi	r24, 0x00	; 0
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	08 95       	ret

000000bc <SysState_Initializing>:
		Usart_PutChar(0xA1);
		Usart_PutChar(_mainCtrl.currentFloor);
		SendEvent(SignalSourceApp, CloseDoor, _mainCtrl.nextFloor, _mainCtrl.currentFloor);
		SetState(&_mainCtrl.fsm, MainCtrl_AwaitDoorClosed);
	}
}
  bc:	fc 01       	movw	r30, r24
  be:	81 81       	ldd	r24, Z+1	; 0x01
  c0:	81 3c       	cpi	r24, 0xC1	; 193
  c2:	71 f5       	brne	.+92     	; 0x120 <SysState_Initializing+0x64>
  c4:	80 e0       	ldi	r24, 0x00	; 0
  c6:	0e 94 9d 02 	call	0x53a	; 0x53a <ClrIndicatorElevatorState>
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	0e 94 9d 02 	call	0x53a	; 0x53a <ClrIndicatorElevatorState>
  d0:	82 e0       	ldi	r24, 0x02	; 2
  d2:	0e 94 9d 02 	call	0x53a	; 0x53a <ClrIndicatorElevatorState>
  d6:	83 e0       	ldi	r24, 0x03	; 3
  d8:	0e 94 9d 02 	call	0x53a	; 0x53a <ClrIndicatorElevatorState>
  dc:	80 e0       	ldi	r24, 0x00	; 0
  de:	0e 94 8b 02 	call	0x516	; 0x516 <ClrIndicatorFloorState>
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	0e 94 8b 02 	call	0x516	; 0x516 <ClrIndicatorFloorState>
  e8:	82 e0       	ldi	r24, 0x02	; 2
  ea:	0e 94 8b 02 	call	0x516	; 0x516 <ClrIndicatorFloorState>
  ee:	83 e0       	ldi	r24, 0x03	; 3
  f0:	0e 94 8b 02 	call	0x516	; 0x516 <ClrIndicatorFloorState>
  f4:	60 e0       	ldi	r22, 0x00	; 0
  f6:	80 e2       	ldi	r24, 0x20	; 32
  f8:	0e 94 53 02 	call	0x4a6	; 0x4a6 <SetDoorState>
  fc:	61 e0       	ldi	r22, 0x01	; 1
  fe:	80 e2       	ldi	r24, 0x20	; 32
 100:	0e 94 53 02 	call	0x4a6	; 0x4a6 <SetDoorState>
 104:	62 e0       	ldi	r22, 0x02	; 2
 106:	80 e2       	ldi	r24, 0x20	; 32
 108:	0e 94 53 02 	call	0x4a6	; 0x4a6 <SetDoorState>
 10c:	63 e0       	ldi	r22, 0x03	; 3
 10e:	80 e2       	ldi	r24, 0x20	; 32
 110:	0e 94 53 02 	call	0x4a6	; 0x4a6 <SetDoorState>
 114:	61 e9       	ldi	r22, 0x91	; 145
 116:	70 e0       	ldi	r23, 0x00	; 0
 118:	80 e6       	ldi	r24, 0x60	; 96
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	0e 94 de 01 	call	0x3bc	; 0x3bc <SetState>
 120:	08 95       	ret

00000122 <MainCtrl_Initializing>:
 122:	cf 93       	push	r28
 124:	df 93       	push	r29
 126:	ec 01       	movw	r28, r24
 128:	80 e8       	ldi	r24, 0x80	; 128
 12a:	0e 94 ca 02 	call	0x594	; 0x594 <Usart_PutChar>
 12e:	89 81       	ldd	r24, Y+1	; 0x01
 130:	0e 94 ca 02 	call	0x594	; 0x594 <Usart_PutChar>
 134:	89 81       	ldd	r24, Y+1	; 0x01
 136:	82 3c       	cpi	r24, 0xC2	; 194
 138:	19 f4       	brne	.+6      	; 0x140 <MainCtrl_Initializing+0x1e>
 13a:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <__DATA_REGION_ORIGIN__+0x5>
 13e:	0b c0       	rjmp	.+22     	; 0x156 <MainCtrl_Initializing+0x34>
 140:	83 30       	cpi	r24, 0x03	; 3
 142:	49 f4       	brne	.+18     	; 0x156 <MainCtrl_Initializing+0x34>
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <EnableStatusUpdate>
 14a:	61 ec       	ldi	r22, 0xC1	; 193
 14c:	70 e0       	ldi	r23, 0x00	; 0
 14e:	80 e6       	ldi	r24, 0x60	; 96
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	0e 94 de 01 	call	0x3bc	; 0x3bc <SetState>
 156:	df 91       	pop	r29
 158:	cf 91       	pop	r28
 15a:	08 95       	ret

0000015c <FindBit>:
 15c:	88 23       	and	r24, r24
 15e:	49 f0       	breq	.+18     	; 0x172 <FindBit+0x16>
 160:	80 fd       	sbrc	r24, 0
 162:	09 c0       	rjmp	.+18     	; 0x176 <FindBit+0x1a>
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	86 95       	lsr	r24
 168:	9f 5f       	subi	r25, 0xFF	; 255
 16a:	80 ff       	sbrs	r24, 0
 16c:	fc cf       	rjmp	.-8      	; 0x166 <FindBit+0xa>
 16e:	89 2f       	mov	r24, r25
 170:	08 95       	ret
 172:	8f ef       	ldi	r24, 0xFF	; 255
 174:	08 95       	ret
 176:	80 e0       	ldi	r24, 0x00	; 0
 178:	08 95       	ret

0000017a <GetFloorReservation>:
 17a:	0e 94 ae 00 	call	0x15c	; 0x15c <FindBit>
 17e:	84 50       	subi	r24, 0x04	; 4
 180:	08 95       	ret

00000182 <MainCtrl_AwaitElevatorRequest>:


void MainCtrl_AwaitElevatorRequest(Message* msg)
{
 182:	0f 93       	push	r16
 184:	1f 93       	push	r17
 186:	cf 93       	push	r28
 188:	df 93       	push	r29
 18a:	ec 01       	movw	r28, r24
	Usart_PutChar(0xA0);
 18c:	80 ea       	ldi	r24, 0xA0	; 160
 18e:	0e 94 ca 02 	call	0x594	; 0x594 <Usart_PutChar>
	Usart_PutChar(msg->Id);
 192:	89 81       	ldd	r24, Y+1	; 0x01
 194:	0e 94 ca 02 	call	0x594	; 0x594 <Usart_PutChar>

	if( IS_BUTTON_PRESS( msg ) )
 198:	89 81       	ldd	r24, Y+1	; 0x01
 19a:	87 3c       	cpi	r24, 0xC7	; 199
 19c:	d1 f4       	brne	.+52     	; 0x1d2 <MainCtrl_AwaitElevatorRequest+0x50>
 19e:	8b 81       	ldd	r24, Y+3	; 0x03
 1a0:	81 30       	cpi	r24, 0x01	; 1
 1a2:	c9 f5       	brne	.+114    	; 0x216 <MainCtrl_AwaitElevatorRequest+0x94>
	{
		if( IS_RESERVATION(msg->MsgParamLow))
 1a4:	8a 81       	ldd	r24, Y+2	; 0x02
 1a6:	98 2f       	mov	r25, r24
 1a8:	90 7f       	andi	r25, 0xF0	; 240
 1aa:	a9 f1       	breq	.+106    	; 0x216 <MainCtrl_AwaitElevatorRequest+0x94>
		{
			FloorType reservation = GetFloorReservation(msg->MsgParamLow);
 1ac:	0e 94 bd 00 	call	0x17a	; 0x17a <GetFloorReservation>
			if( reservation != _mainCtrl.currentFloor )
 1b0:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <__DATA_REGION_ORIGIN__+0x5>
 1b4:	89 17       	cp	r24, r25
 1b6:	19 f0       	breq	.+6      	; 0x1be <MainCtrl_AwaitElevatorRequest+0x3c>
			{
				//ToDo: Reservations (Wenn jemand den Lift bestellt) in den Scheduler einfügen
				//ToDo: Nächsten reserviertes Stockwerk aus dem Scheduler rausholen und in _main.Ctrl.NextFloor übergeben
				
				_mainCtrl.nextFloor = reservation;
 1b8:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__DATA_REGION_ORIGIN__+0x6>
 1bc:	0a c0       	rjmp	.+20     	; 0x1d2 <MainCtrl_AwaitElevatorRequest+0x50>
				//SendEvent(SignalSourceApp, AwaitDoorClosed, _mainCtrl.nextFloor, 0);
			}
			//ToDo diese Logik ausbauen in anderen State (Türe wieder öffnen falls auf dem gleichen Stock)
			else if( reservation == _mainCtrl.currentFloor)
			{
				SetDoorState(DoorOpen, _mainCtrl.currentFloor);
 1be:	68 2f       	mov	r22, r24
 1c0:	80 e1       	ldi	r24, 0x10	; 16
 1c2:	0e 94 53 02 	call	0x4a6	; 0x4a6 <SetDoorState>
				//SendEvent(SignalSourceApp, )
				_mainCtrl.timer = StartTimer(5000);
 1c6:	88 e8       	ldi	r24, 0x88	; 136
 1c8:	93 e1       	ldi	r25, 0x13	; 19
 1ca:	0e 94 88 05 	call	0xb10	; 0xb10 <StartTimer>
 1ce:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <__DATA_REGION_ORIGIN__+0x7>
			}
		}
	}
	if( msg->Id == TimerEvent )
 1d2:	89 81       	ldd	r24, Y+1	; 0x01
 1d4:	88 3c       	cpi	r24, 0xC8	; 200
 1d6:	71 f4       	brne	.+28     	; 0x1f4 <MainCtrl_AwaitElevatorRequest+0x72>
	{
		Usart_PutChar(0xA1);
 1d8:	81 ea       	ldi	r24, 0xA1	; 161
 1da:	0e 94 ca 02 	call	0x594	; 0x594 <Usart_PutChar>
		Usart_PutChar(_mainCtrl.currentFloor);
 1de:	00 e6       	ldi	r16, 0x60	; 96
 1e0:	10 e0       	ldi	r17, 0x00	; 0
 1e2:	f8 01       	movw	r30, r16
 1e4:	85 81       	ldd	r24, Z+5	; 0x05
 1e6:	0e 94 ca 02 	call	0x594	; 0x594 <Usart_PutChar>
		SetDoorState(DoorClosed, _mainCtrl.currentFloor);
 1ea:	f8 01       	movw	r30, r16
 1ec:	65 81       	ldd	r22, Z+5	; 0x05
 1ee:	80 e2       	ldi	r24, 0x20	; 32
 1f0:	0e 94 53 02 	call	0x4a6	; 0x4a6 <SetDoorState>
	}
	
	if( msg->Id == Message_PosChanged)
 1f4:	89 81       	ldd	r24, Y+1	; 0x01
 1f6:	82 30       	cpi	r24, 0x02	; 2
 1f8:	71 f4       	brne	.+28     	; 0x216 <MainCtrl_AwaitElevatorRequest+0x94>
	{
		if( msg->MsgParamHigh == msg->MsgParamLow)
 1fa:	8b 81       	ldd	r24, Y+3	; 0x03
 1fc:	9a 81       	ldd	r25, Y+2	; 0x02
 1fe:	89 13       	cpse	r24, r25
 200:	0a c0       	rjmp	.+20     	; 0x216 <MainCtrl_AwaitElevatorRequest+0x94>
		{
			_mainCtrl.currentFloor = msg->MsgParamHigh/POS_STEPS_PER_FLOOR;
 202:	c0 e6       	ldi	r28, 0x60	; 96
 204:	d0 e0       	ldi	r29, 0x00	; 0
 206:	82 95       	swap	r24
 208:	8f 70       	andi	r24, 0x0F	; 15
 20a:	8d 83       	std	Y+5, r24	; 0x05
			_mainCtrl.timer = StartTimer(5000);
 20c:	88 e8       	ldi	r24, 0x88	; 136
 20e:	93 e1       	ldi	r25, 0x13	; 19
 210:	0e 94 88 05 	call	0xb10	; 0xb10 <StartTimer>
 214:	8f 83       	std	Y+7, r24	; 0x07
		}
	}
}
 216:	df 91       	pop	r29
 218:	cf 91       	pop	r28
 21a:	1f 91       	pop	r17
 21c:	0f 91       	pop	r16
 21e:	08 95       	ret

00000220 <NotifyCalibrationDone>:
	.target = Floor0,
	.fsm  = { .Next = 0, .CurrentState = MotorCtrl_Initializing, .RxMask = 0xFF },
};

void NotifyCalibrationDone(uint8_t currentPos, uint8_t targetPostion)
{
 220:	1f 93       	push	r17
 222:	cf 93       	push	r28
 224:	df 93       	push	r29
 226:	d8 2f       	mov	r29, r24
 228:	16 2f       	mov	r17, r22
	FloorType floor = (FloorType)currentPos/POS_STEPS_PER_FLOOR;
 22a:	c8 2f       	mov	r28, r24
 22c:	c2 95       	swap	r28
 22e:	cf 70       	andi	r28, 0x0F	; 15
	SetDisplay(floor);
 230:	8c 2f       	mov	r24, r28
 232:	0e 94 88 02 	call	0x510	; 0x510 <SetDisplay>
	if( ((currentPos %floor) == 0 ) && floor == Floor0 )
 236:	8d 2f       	mov	r24, r29
 238:	6c 2f       	mov	r22, r28
 23a:	0e 94 20 06 	call	0xc40	; 0xc40 <__udivmodqi4>
 23e:	91 11       	cpse	r25, r1
 240:	08 c0       	rjmp	.+16     	; 0x252 <NotifyCalibrationDone+0x32>
 242:	c1 11       	cpse	r28, r1
 244:	06 c0       	rjmp	.+12     	; 0x252 <NotifyCalibrationDone+0x32>
	{
		SendEvent(SignalSourceEnvironment, LiftCalibrated, currentPos, targetPostion);
 246:	21 2f       	mov	r18, r17
 248:	4d 2f       	mov	r20, r29
 24a:	62 ec       	ldi	r22, 0xC2	; 194
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	0e 94 ce 02 	call	0x59c	; 0x59c <SendEvent>
	}
}
 252:	df 91       	pop	r29
 254:	cf 91       	pop	r28
 256:	1f 91       	pop	r17
 258:	08 95       	ret

0000025a <OnElevatorPositionChanged>:
		SendEvent(SignalSourceApp, Message_ElevatorReady, Floor0, 0);
	}
}

void OnElevatorPositionChanged(uint8_t currentPos, uint8_t targetPos)
{
 25a:	26 2f       	mov	r18, r22
	SendEvent(SignalSourceElevator, Message_PosChanged, currentPos, targetPos);
 25c:	48 2f       	mov	r20, r24
 25e:	62 e0       	ldi	r22, 0x02	; 2
 260:	82 e0       	ldi	r24, 0x02	; 2
 262:	0e 94 ce 02 	call	0x59c	; 0x59c <SendEvent>
 266:	08 95       	ret

00000268 <MotorCtrl_Initializing>:
	}
}

void MotorCtrl_Initializing(Message* msg)
{
	if( msg->Id == LiftStarted)
 268:	fc 01       	movw	r30, r24
 26a:	81 81       	ldd	r24, Z+1	; 0x01
 26c:	81 3c       	cpi	r24, 0xC1	; 193
 26e:	29 f4       	brne	.+10     	; 0x27a <MotorCtrl_Initializing+0x12>
	{
		CalibrateElevatorPosition(NotifyCalibrationDone);
 270:	80 e1       	ldi	r24, 0x10	; 16
 272:	91 e0       	ldi	r25, 0x01	; 1
 274:	0e 94 84 02 	call	0x508	; 0x508 <CalibrateElevatorPosition>
		return;
 278:	08 95       	ret
	}
	if( msg->Id == LiftCalibrated )
 27a:	82 3c       	cpi	r24, 0xC2	; 194
 27c:	79 f4       	brne	.+30     	; 0x29c <MotorCtrl_Initializing+0x34>
	{
		SetDisplay(Floor0);
 27e:	80 e0       	ldi	r24, 0x00	; 0
 280:	0e 94 88 02 	call	0x510	; 0x510 <SetDisplay>
		SetState(&_motorCtrl.fsm, MotorCtrl_Stopped);
 284:	6f e6       	ldi	r22, 0x6F	; 111
 286:	71 e0       	ldi	r23, 0x01	; 1
 288:	8f e6       	ldi	r24, 0x6F	; 111
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	0e 94 de 01 	call	0x3bc	; 0x3bc <SetState>
		SendEvent(SignalSourceApp, Message_ElevatorReady, Floor0, 0);
 290:	20 e0       	ldi	r18, 0x00	; 0
 292:	40 e0       	ldi	r20, 0x00	; 0
 294:	63 e0       	ldi	r22, 0x03	; 3
 296:	80 e2       	ldi	r24, 0x20	; 32
 298:	0e 94 ce 02 	call	0x59c	; 0x59c <SendEvent>
 29c:	08 95       	ret

0000029e <MotorCtrl_Moving>:
	}
}


void MotorCtrl_Moving(Message* msg)
{
 29e:	cf 93       	push	r28
 2a0:	df 93       	push	r29
	if( msg->Id == Message_PosChanged && msg->MsgParamLow == msg->MsgParamHigh)
 2a2:	fc 01       	movw	r30, r24
 2a4:	21 81       	ldd	r18, Z+1	; 0x01
 2a6:	22 30       	cpi	r18, 0x02	; 2
 2a8:	b9 f4       	brne	.+46     	; 0x2d8 <MotorCtrl_Moving+0x3a>
 2aa:	62 81       	ldd	r22, Z+2	; 0x02
 2ac:	83 81       	ldd	r24, Z+3	; 0x03
 2ae:	68 13       	cpse	r22, r24
 2b0:	13 c0       	rjmp	.+38     	; 0x2d8 <MotorCtrl_Moving+0x3a>
	{
		_motorCtrl.target = (FloorType)msg->MsgParamLow/POS_STEPS_PER_FLOOR;
 2b2:	62 95       	swap	r22
 2b4:	6f 70       	andi	r22, 0x0F	; 15
 2b6:	cf e6       	ldi	r28, 0x6F	; 111
 2b8:	d0 e0       	ldi	r29, 0x00	; 0
 2ba:	6e 83       	std	Y+6, r22	; 0x06
		SetDoorState(DoorOpen, _motorCtrl.target);
 2bc:	80 e1       	ldi	r24, 0x10	; 16
 2be:	0e 94 53 02 	call	0x4a6	; 0x4a6 <SetDoorState>
		SendEvent(SignalSourceApp, SetDoorOpenTimer, _motorCtrl.target, 0);
 2c2:	20 e0       	ldi	r18, 0x00	; 0
 2c4:	4e 81       	ldd	r20, Y+6	; 0x06
 2c6:	67 e0       	ldi	r22, 0x07	; 7
 2c8:	80 e2       	ldi	r24, 0x20	; 32
 2ca:	0e 94 ce 02 	call	0x59c	; 0x59c <SendEvent>
		SetState(&_motorCtrl.fsm, MotorCtrl_Stopped);
 2ce:	6f e6       	ldi	r22, 0x6F	; 111
 2d0:	71 e0       	ldi	r23, 0x01	; 1
 2d2:	ce 01       	movw	r24, r28
 2d4:	0e 94 de 01 	call	0x3bc	; 0x3bc <SetState>
	}
}
 2d8:	df 91       	pop	r29
 2da:	cf 91       	pop	r28
 2dc:	08 95       	ret

000002de <MotorCtrl_Stopped>:
	SendEvent(SignalSourceElevator, Message_PosChanged, currentPos, targetPos);
}


void MotorCtrl_Stopped(Message* msg)
{
 2de:	0f 93       	push	r16
 2e0:	1f 93       	push	r17
 2e2:	cf 93       	push	r28
 2e4:	df 93       	push	r29
 2e6:	ec 01       	movw	r28, r24
	if(msg->Id == CloseDoor){
 2e8:	89 81       	ldd	r24, Y+1	; 0x01
 2ea:	84 30       	cpi	r24, 0x04	; 4
 2ec:	89 f4       	brne	.+34     	; 0x310 <MotorCtrl_Stopped+0x32>
		_motorCtrl.start = (FloorType)msg->MsgParamHigh;
 2ee:	6b 81       	ldd	r22, Y+3	; 0x03
 2f0:	0f e6       	ldi	r16, 0x6F	; 111
 2f2:	10 e0       	ldi	r17, 0x00	; 0
 2f4:	f8 01       	movw	r30, r16
 2f6:	65 83       	std	Z+5, r22	; 0x05
		_motorCtrl.target = (FloorType)msg->MsgParamLow;
 2f8:	8a 81       	ldd	r24, Y+2	; 0x02
 2fa:	86 83       	std	Z+6, r24	; 0x06
		SetDoorState(DoorClosed, _motorCtrl.start);
 2fc:	80 e2       	ldi	r24, 0x20	; 32
 2fe:	0e 94 53 02 	call	0x4a6	; 0x4a6 <SetDoorState>
		SendEvent(SignalSourceApp, DoorIsClosed, _motorCtrl.target, _motorCtrl.start);
 302:	f8 01       	movw	r30, r16
 304:	25 81       	ldd	r18, Z+5	; 0x05
 306:	46 81       	ldd	r20, Z+6	; 0x06
 308:	66 e0       	ldi	r22, 0x06	; 6
 30a:	80 e2       	ldi	r24, 0x20	; 32
 30c:	0e 94 ce 02 	call	0x59c	; 0x59c <SendEvent>
	}
	
	if(msg->Id == OpenDoor){
 310:	89 81       	ldd	r24, Y+1	; 0x01
 312:	88 30       	cpi	r24, 0x08	; 8
 314:	79 f4       	brne	.+30     	; 0x334 <MotorCtrl_Stopped+0x56>
		_motorCtrl.start = (FloorType)msg->MsgParamLow;
 316:	6a 81       	ldd	r22, Y+2	; 0x02
 318:	0f e6       	ldi	r16, 0x6F	; 111
 31a:	10 e0       	ldi	r17, 0x00	; 0
 31c:	f8 01       	movw	r30, r16
 31e:	65 83       	std	Z+5, r22	; 0x05
		SetDoorState(DoorOpen, _motorCtrl.start);
 320:	80 e1       	ldi	r24, 0x10	; 16
 322:	0e 94 53 02 	call	0x4a6	; 0x4a6 <SetDoorState>
		SendEvent(SignalSourceApp, SetDoorOpenTimer, _motorCtrl.target, 0);
 326:	20 e0       	ldi	r18, 0x00	; 0
 328:	f8 01       	movw	r30, r16
 32a:	46 81       	ldd	r20, Z+6	; 0x06
 32c:	67 e0       	ldi	r22, 0x07	; 7
 32e:	80 e2       	ldi	r24, 0x20	; 32
 330:	0e 94 ce 02 	call	0x59c	; 0x59c <SendEvent>
		
	}
	
	if( msg->Id == Message_MoveTo && msg->MsgParamLow < 4)
 334:	89 81       	ldd	r24, Y+1	; 0x01
 336:	81 30       	cpi	r24, 0x01	; 1
 338:	91 f4       	brne	.+36     	; 0x35e <MotorCtrl_Stopped+0x80>
 33a:	8a 81       	ldd	r24, Y+2	; 0x02
 33c:	84 30       	cpi	r24, 0x04	; 4
 33e:	78 f4       	brcc	.+30     	; 0x35e <MotorCtrl_Stopped+0x80>
	{
		_motorCtrl.target = (FloorType)msg->MsgParamLow;
 340:	cf e6       	ldi	r28, 0x6F	; 111
 342:	d0 e0       	ldi	r29, 0x00	; 0
 344:	8e 83       	std	Y+6, r24	; 0x06
		SetState(&_motorCtrl.fsm, MotorCtrl_Moving);
 346:	6f e4       	ldi	r22, 0x4F	; 79
 348:	71 e0       	ldi	r23, 0x01	; 1
 34a:	ce 01       	movw	r24, r28
 34c:	0e 94 de 01 	call	0x3bc	; 0x3bc <SetState>
		MoveElevator(_motorCtrl.target * POS_STEPS_PER_FLOOR, OnElevatorPositionChanged );
 350:	8e 81       	ldd	r24, Y+6	; 0x06
 352:	6d e2       	ldi	r22, 0x2D	; 45
 354:	71 e0       	ldi	r23, 0x01	; 1
 356:	82 95       	swap	r24
 358:	80 7f       	andi	r24, 0xF0	; 240
 35a:	0e 94 70 02 	call	0x4e0	; 0x4e0 <MoveElevator>
		//ToDO Acceleration Logic goes here
	}
}
 35e:	df 91       	pop	r29
 360:	cf 91       	pop	r28
 362:	1f 91       	pop	r17
 364:	0f 91       	pop	r16
 366:	08 95       	ret

00000368 <TestFunction>:
{
	
}

void TestFunction(uint8_t* data, uint8_t nrOfBytes)
{
 368:	cf 93       	push	r28
 36a:	df 93       	push	r29
 36c:	fc 01       	movw	r30, r24
	if( data[0] == 1 )
 36e:	90 81       	ld	r25, Z
 370:	91 30       	cpi	r25, 0x01	; 1
 372:	49 f4       	brne	.+18     	; 0x386 <TestFunction+0x1e>
 374:	c8 e8       	ldi	r28, 0x88	; 136
 376:	d0 e0       	ldi	r29, 0x00	; 0
 378:	88 e4       	ldi	r24, 0x48	; 72
	{
		char *ch = "Hello-World\n";
		while( *ch != 0 )
		{
			Usart_PutChar(*ch++);
 37a:	0e 94 ca 02 	call	0x594	; 0x594 <Usart_PutChar>
void TestFunction(uint8_t* data, uint8_t nrOfBytes)
{
	if( data[0] == 1 )
	{
		char *ch = "Hello-World\n";
		while( *ch != 0 )
 37e:	89 91       	ld	r24, Y+
 380:	81 11       	cpse	r24, r1
 382:	fb cf       	rjmp	.-10     	; 0x37a <TestFunction+0x12>
 384:	08 c0       	rjmp	.+16     	; 0x396 <TestFunction+0x2e>
		{
			Usart_PutChar(*ch++);
		}
	}
	else if( data[0] == 2 )
 386:	92 30       	cpi	r25, 0x02	; 2
 388:	31 f4       	brne	.+12     	; 0x396 <TestFunction+0x2e>
	{
		SendEvent(SignalSourceApp, Message_MoveTo, data[1], 0);
 38a:	20 e0       	ldi	r18, 0x00	; 0
 38c:	41 81       	ldd	r20, Z+1	; 0x01
 38e:	61 e0       	ldi	r22, 0x01	; 1
 390:	80 e2       	ldi	r24, 0x20	; 32
 392:	0e 94 ce 02 	call	0x59c	; 0x59c <SendEvent>
	}
}
 396:	df 91       	pop	r29
 398:	cf 91       	pop	r28
 39a:	08 95       	ret

0000039c <EnterAtomic>:
 39c:	f8 94       	cli
 39e:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <enterAtomicNesting>
 3a2:	8f 5f       	subi	r24, 0xFF	; 255
 3a4:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <enterAtomicNesting>
 3a8:	08 95       	ret

000003aa <LeaveAtomic>:
 3aa:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <enterAtomicNesting>
 3ae:	81 50       	subi	r24, 0x01	; 1
 3b0:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <enterAtomicNesting>
 3b4:	81 11       	cpse	r24, r1
 3b6:	01 c0       	rjmp	.+2      	; 0x3ba <LeaveAtomic+0x10>
 3b8:	78 94       	sei
 3ba:	08 95       	ret

000003bc <SetState>:
 3bc:	0f 93       	push	r16
 3be:	1f 93       	push	r17
 3c0:	cf 93       	push	r28
 3c2:	df 93       	push	r29
 3c4:	ec 01       	movw	r28, r24
 3c6:	8b 01       	movw	r16, r22
 3c8:	0e 94 ce 01 	call	0x39c	; 0x39c <EnterAtomic>
 3cc:	1c 83       	std	Y+4, r17	; 0x04
 3ce:	0b 83       	std	Y+3, r16	; 0x03
 3d0:	df 91       	pop	r29
 3d2:	cf 91       	pop	r28
 3d4:	1f 91       	pop	r17
 3d6:	0f 91       	pop	r16
 3d8:	0c 94 d5 01 	jmp	0x3aa	; 0x3aa <LeaveAtomic>

000003dc <RegisterFsm>:
 3dc:	e0 91 76 00 	lds	r30, 0x0076	; 0x800076 <anchor>
 3e0:	f0 91 77 00 	lds	r31, 0x0077	; 0x800077 <anchor+0x1>
 3e4:	a6 e7       	ldi	r26, 0x76	; 118
 3e6:	b0 e0       	ldi	r27, 0x00	; 0
 3e8:	20 e0       	ldi	r18, 0x00	; 0
 3ea:	e6 37       	cpi	r30, 0x76	; 118
 3ec:	f2 07       	cpc	r31, r18
 3ee:	29 f0       	breq	.+10     	; 0x3fa <RegisterFsm+0x1e>
 3f0:	df 01       	movw	r26, r30
 3f2:	01 90       	ld	r0, Z+
 3f4:	f0 81       	ld	r31, Z
 3f6:	e0 2d       	mov	r30, r0
 3f8:	f7 cf       	rjmp	.-18     	; 0x3e8 <RegisterFsm+0xc>
 3fa:	8d 93       	st	X+, r24
 3fc:	9c 93       	st	X, r25
 3fe:	dc 01       	movw	r26, r24
 400:	ed 93       	st	X+, r30
 402:	fc 93       	st	X, r31
 404:	08 95       	ret

00000406 <DispatchEvent>:
 406:	0f 93       	push	r16
 408:	1f 93       	push	r17
 40a:	cf 93       	push	r28
 40c:	df 93       	push	r29
 40e:	0e 94 ce 01 	call	0x39c	; 0x39c <EnterAtomic>
 412:	90 91 ad 00 	lds	r25, 0x00AD	; 0x8000ad <msgQ_out>
 416:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <msgQ_in>
 41a:	98 17       	cp	r25, r24
 41c:	59 f0       	breq	.+22     	; 0x434 <DispatchEvent+0x2e>
 41e:	84 e0       	ldi	r24, 0x04	; 4
 420:	98 9f       	mul	r25, r24
 422:	e0 01       	movw	r28, r0
 424:	11 24       	eor	r1, r1
 426:	c1 55       	subi	r28, 0x51	; 81
 428:	df 4f       	sbci	r29, 0xFF	; 255
 42a:	9f 5f       	subi	r25, 0xFF	; 255
 42c:	9f 71       	andi	r25, 0x1F	; 31
 42e:	90 93 ad 00 	sts	0x00AD, r25	; 0x8000ad <msgQ_out>
 432:	02 c0       	rjmp	.+4      	; 0x438 <DispatchEvent+0x32>
 434:	c0 e0       	ldi	r28, 0x00	; 0
 436:	d0 e0       	ldi	r29, 0x00	; 0
 438:	0e 94 d5 01 	call	0x3aa	; 0x3aa <LeaveAtomic>
 43c:	20 97       	sbiw	r28, 0x00	; 0
 43e:	c9 f0       	breq	.+50     	; 0x472 <DispatchEvent+0x6c>
 440:	00 91 76 00 	lds	r16, 0x0076	; 0x800076 <anchor>
 444:	10 91 77 00 	lds	r17, 0x0077	; 0x800077 <anchor+0x1>
 448:	f0 e0       	ldi	r31, 0x00	; 0
 44a:	06 37       	cpi	r16, 0x76	; 118
 44c:	1f 07       	cpc	r17, r31
 44e:	89 f0       	breq	.+34     	; 0x472 <DispatchEvent+0x6c>
 450:	d8 01       	movw	r26, r16
 452:	12 96       	adiw	r26, 0x02	; 2
 454:	9c 91       	ld	r25, X
 456:	12 97       	sbiw	r26, 0x02	; 2
 458:	88 81       	ld	r24, Y
 45a:	89 23       	and	r24, r25
 45c:	31 f0       	breq	.+12     	; 0x46a <DispatchEvent+0x64>
 45e:	13 96       	adiw	r26, 0x03	; 3
 460:	ed 91       	ld	r30, X+
 462:	fc 91       	ld	r31, X
 464:	14 97       	sbiw	r26, 0x04	; 4
 466:	ce 01       	movw	r24, r28
 468:	09 95       	icall
 46a:	f8 01       	movw	r30, r16
 46c:	00 81       	ld	r16, Z
 46e:	11 81       	ldd	r17, Z+1	; 0x01
 470:	eb cf       	rjmp	.-42     	; 0x448 <DispatchEvent+0x42>
 472:	df 91       	pop	r29
 474:	cf 91       	pop	r28
 476:	1f 91       	pop	r17
 478:	0f 91       	pop	r16
 47a:	08 95       	ret

0000047c <InitializeCounter>:
 47c:	12 be       	out	0x32, r1	; 50
 47e:	8b e0       	ldi	r24, 0x0B	; 11
 480:	83 bf       	out	0x33, r24	; 51
 482:	8d e7       	ldi	r24, 0x7D	; 125
 484:	8c bf       	out	0x3c, r24	; 60
 486:	89 b7       	in	r24, 0x39	; 57
 488:	82 60       	ori	r24, 0x02	; 2
 48a:	89 bf       	out	0x39, r24	; 57
 48c:	80 e8       	ldi	r24, 0x80	; 128
 48e:	91 e0       	ldi	r25, 0x01	; 1
 490:	9b bd       	out	0x2b, r25	; 43
 492:	8a bd       	out	0x2a, r24	; 42
 494:	1d bc       	out	0x2d, r1	; 45
 496:	1c bc       	out	0x2c, r1	; 44
 498:	1f bc       	out	0x2f, r1	; 47
 49a:	8d e0       	ldi	r24, 0x0D	; 13
 49c:	8e bd       	out	0x2e, r24	; 46
 49e:	89 b7       	in	r24, 0x39	; 57
 4a0:	80 61       	ori	r24, 0x10	; 16
 4a2:	89 bf       	out	0x39, r24	; 57
 4a4:	08 95       	ret

000004a6 <SetDoorState>:
 4a6:	cf 93       	push	r28
 4a8:	df 93       	push	r29
 4aa:	d8 2f       	mov	r29, r24
 4ac:	c6 2f       	mov	r28, r22
 4ae:	0e 94 ce 01 	call	0x39c	; 0x39c <EnterAtomic>
 4b2:	6c 2f       	mov	r22, r28
 4b4:	70 e0       	ldi	r23, 0x00	; 0
 4b6:	8d 2f       	mov	r24, r29
 4b8:	80 73       	andi	r24, 0x30	; 48
 4ba:	66 0f       	add	r22, r22
 4bc:	77 1f       	adc	r23, r23
 4be:	fb 01       	movw	r30, r22
 4c0:	ec 58       	subi	r30, 0x8C	; 140
 4c2:	fe 4f       	sbci	r31, 0xFE	; 254
 4c4:	90 81       	ld	r25, Z
 4c6:	98 23       	and	r25, r24
 4c8:	11 f4       	brne	.+4      	; 0x4ce <SetDoorState+0x28>
 4ca:	94 e0       	ldi	r25, 0x04	; 4
 4cc:	91 83       	std	Z+1, r25	; 0x01
 4ce:	fb 01       	movw	r30, r22
 4d0:	ec 58       	subi	r30, 0x8C	; 140
 4d2:	fe 4f       	sbci	r31, 0xFE	; 254
 4d4:	81 60       	ori	r24, 0x01	; 1
 4d6:	80 83       	st	Z, r24
 4d8:	df 91       	pop	r29
 4da:	cf 91       	pop	r28
 4dc:	0c 94 d5 01 	jmp	0x3aa	; 0x3aa <LeaveAtomic>

000004e0 <MoveElevator>:
 4e0:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <Elevator+0x1>
 4e4:	10 92 7f 00 	sts	0x007F, r1	; 0x80007f <Elevator+0x4>
 4e8:	70 93 81 00 	sts	0x0081, r23	; 0x800081 <Elevator+0x6>
 4ec:	60 93 80 00 	sts	0x0080, r22	; 0x800080 <Elevator+0x5>
 4f0:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <Elevator>
 4f4:	98 17       	cp	r25, r24
 4f6:	10 f4       	brcc	.+4      	; 0x4fc <MoveElevator+0x1c>
 4f8:	81 e0       	ldi	r24, 0x01	; 1
 4fa:	03 c0       	rjmp	.+6      	; 0x502 <MoveElevator+0x22>
 4fc:	89 17       	cp	r24, r25
 4fe:	18 f4       	brcc	.+6      	; 0x506 <MoveElevator+0x26>
 500:	8f ef       	ldi	r24, 0xFF	; 255
 502:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <Elevator+0x4>
 506:	08 95       	ret

00000508 <CalibrateElevatorPosition>:
 508:	bc 01       	movw	r22, r24
 50a:	80 e0       	ldi	r24, 0x00	; 0
 50c:	0c 94 70 02 	jmp	0x4e0	; 0x4e0 <MoveElevator>

00000510 <SetDisplay>:
 510:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <liftDisplay7Seg>
 514:	08 95       	ret

00000516 <ClrIndicatorFloorState>:
 516:	84 30       	cpi	r24, 0x04	; 4
 518:	78 f4       	brcc	.+30     	; 0x538 <ClrIndicatorFloorState+0x22>
 51a:	21 e0       	ldi	r18, 0x01	; 1
 51c:	30 e0       	ldi	r19, 0x00	; 0
 51e:	a9 01       	movw	r20, r18
 520:	02 c0       	rjmp	.+4      	; 0x526 <ClrIndicatorFloorState+0x10>
 522:	44 0f       	add	r20, r20
 524:	55 1f       	adc	r21, r21
 526:	8a 95       	dec	r24
 528:	e2 f7       	brpl	.-8      	; 0x522 <ClrIndicatorFloorState+0xc>
 52a:	ca 01       	movw	r24, r20
 52c:	80 95       	com	r24
 52e:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <displayCache>
 532:	89 23       	and	r24, r25
 534:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <displayCache>
 538:	08 95       	ret

0000053a <ClrIndicatorElevatorState>:
 53a:	84 30       	cpi	r24, 0x04	; 4
 53c:	70 f4       	brcc	.+28     	; 0x55a <ClrIndicatorElevatorState+0x20>
 53e:	24 e0       	ldi	r18, 0x04	; 4
 540:	28 0f       	add	r18, r24
 542:	81 e0       	ldi	r24, 0x01	; 1
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	01 c0       	rjmp	.+2      	; 0x54a <ClrIndicatorElevatorState+0x10>
 548:	88 0f       	add	r24, r24
 54a:	2a 95       	dec	r18
 54c:	ea f7       	brpl	.-6      	; 0x548 <ClrIndicatorElevatorState+0xe>
 54e:	80 95       	com	r24
 550:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <displayCache>
 554:	89 23       	and	r24, r25
 556:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <displayCache>
 55a:	08 95       	ret

0000055c <RegisterTestHandler>:
 55c:	90 93 36 01 	sts	0x0136, r25	; 0x800136 <_testHandler+0x1>
 560:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <_testHandler>
 564:	08 95       	ret

00000566 <Usart_Init>:
 566:	10 bc       	out	0x20, r1	; 32
 568:	8c e0       	ldi	r24, 0x0C	; 12
 56a:	89 b9       	out	0x09, r24	; 9
 56c:	86 e8       	ldi	r24, 0x86	; 134
 56e:	80 bd       	out	0x20, r24	; 32
 570:	88 e9       	ldi	r24, 0x98	; 152
 572:	8a b9       	out	0x0a, r24	; 10
 574:	78 94       	sei
 576:	08 95       	ret

00000578 <InitializePorts>:
 578:	8f ef       	ldi	r24, 0xFF	; 255
 57a:	87 bb       	out	0x17, r24	; 23
 57c:	84 bb       	out	0x14, r24	; 20
 57e:	8a bb       	out	0x1a, r24	; 26
 580:	11 ba       	out	0x11, r1	; 17
 582:	0e 94 b3 02 	call	0x566	; 0x566 <Usart_Init>
 586:	85 b7       	in	r24, 0x35	; 53
 588:	83 60       	ori	r24, 0x03	; 3
 58a:	85 bf       	out	0x35, r24	; 53
 58c:	8b b7       	in	r24, 0x3b	; 59
 58e:	80 64       	ori	r24, 0x40	; 64
 590:	8b bf       	out	0x3b, r24	; 59
 592:	08 95       	ret

00000594 <Usart_PutChar>:
 594:	8c b9       	out	0x0c, r24	; 12
 596:	5d 9b       	sbis	0x0b, 5	; 11
 598:	fe cf       	rjmp	.-4      	; 0x596 <Usart_PutChar+0x2>
 59a:	08 95       	ret

0000059c <SendEvent>:
 59c:	0f 93       	push	r16
 59e:	1f 93       	push	r17
 5a0:	cf 93       	push	r28
 5a2:	df 93       	push	r29
 5a4:	c8 2f       	mov	r28, r24
 5a6:	06 2f       	mov	r16, r22
 5a8:	d4 2f       	mov	r29, r20
 5aa:	12 2f       	mov	r17, r18
 5ac:	0e 94 ce 01 	call	0x39c	; 0x39c <EnterAtomic>
 5b0:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <msgQ_in>
 5b4:	e8 2f       	mov	r30, r24
 5b6:	f0 e0       	ldi	r31, 0x00	; 0
 5b8:	af 01       	movw	r20, r30
 5ba:	4f 5f       	subi	r20, 0xFF	; 255
 5bc:	5f 4f       	sbci	r21, 0xFF	; 255
 5be:	4f 71       	andi	r20, 0x1F	; 31
 5c0:	55 27       	eor	r21, r21
 5c2:	20 91 ad 00 	lds	r18, 0x00AD	; 0x8000ad <msgQ_out>
 5c6:	30 e0       	ldi	r19, 0x00	; 0
 5c8:	42 17       	cp	r20, r18
 5ca:	53 07       	cpc	r21, r19
 5cc:	71 f4       	brne	.+28     	; 0x5ea <SendEvent+0x4e>
 5ce:	8f ef       	ldi	r24, 0xFF	; 255
 5d0:	0e 94 ca 02 	call	0x594	; 0x594 <Usart_PutChar>
 5d4:	80 e0       	ldi	r24, 0x00	; 0
 5d6:	0e 94 ca 02 	call	0x594	; 0x594 <Usart_PutChar>
 5da:	8f ef       	ldi	r24, 0xFF	; 255
 5dc:	0e 94 ca 02 	call	0x594	; 0x594 <Usart_PutChar>
 5e0:	8e ed       	ldi	r24, 0xDE	; 222
 5e2:	0e 94 ca 02 	call	0x594	; 0x594 <Usart_PutChar>
 5e6:	8d ea       	ldi	r24, 0xAD	; 173
 5e8:	f9 cf       	rjmp	.-14     	; 0x5dc <SendEvent+0x40>
 5ea:	ee 0f       	add	r30, r30
 5ec:	ff 1f       	adc	r31, r31
 5ee:	ee 0f       	add	r30, r30
 5f0:	ff 1f       	adc	r31, r31
 5f2:	e1 55       	subi	r30, 0x51	; 81
 5f4:	ff 4f       	sbci	r31, 0xFF	; 255
 5f6:	01 83       	std	Z+1, r16	; 0x01
 5f8:	13 83       	std	Z+3, r17	; 0x03
 5fa:	d2 83       	std	Z+2, r29	; 0x02
 5fc:	c0 83       	st	Z, r28
 5fe:	8f 5f       	subi	r24, 0xFF	; 255
 600:	8f 71       	andi	r24, 0x1F	; 31
 602:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <msgQ_in>
 606:	df 91       	pop	r29
 608:	cf 91       	pop	r28
 60a:	1f 91       	pop	r17
 60c:	0f 91       	pop	r16
 60e:	0c 94 d5 01 	jmp	0x3aa	; 0x3aa <LeaveAtomic>

00000612 <MakeDoorStates>:
 612:	df 92       	push	r13
 614:	ef 92       	push	r14
 616:	ff 92       	push	r15
 618:	0f 93       	push	r16
 61a:	1f 93       	push	r17
 61c:	cf 93       	push	r28
 61e:	df 93       	push	r29
 620:	c4 e7       	ldi	r28, 0x74	; 116
 622:	d1 e0       	ldi	r29, 0x01	; 1
 624:	00 e0       	ldi	r16, 0x00	; 0
 626:	10 e0       	ldi	r17, 0x00	; 0
 628:	ee 24       	eor	r14, r14
 62a:	e3 94       	inc	r14
 62c:	f1 2c       	mov	r15, r1
 62e:	89 81       	ldd	r24, Y+1	; 0x01
 630:	81 11       	cpse	r24, r1
 632:	24 c0       	rjmp	.+72     	; 0x67c <MakeDoorStates+0x6a>
 634:	48 81       	ld	r20, Y
 636:	40 ff       	sbrs	r20, 0
 638:	23 c0       	rjmp	.+70     	; 0x680 <MakeDoorStates+0x6e>
 63a:	4e 7f       	andi	r20, 0xFE	; 254
 63c:	48 83       	st	Y, r20
 63e:	20 2f       	mov	r18, r16
 640:	65 ec       	ldi	r22, 0xC5	; 197
 642:	80 e1       	ldi	r24, 0x10	; 16
 644:	0e 94 ce 02 	call	0x59c	; 0x59c <SendEvent>
 648:	88 81       	ld	r24, Y
 64a:	40 91 31 01 	lds	r20, 0x0131	; 0x800131 <OpenDoors>
 64e:	84 ff       	sbrs	r24, 4
 650:	0a c0       	rjmp	.+20     	; 0x666 <MakeDoorStates+0x54>
 652:	97 01       	movw	r18, r14
 654:	00 2e       	mov	r0, r16
 656:	01 c0       	rjmp	.+2      	; 0x65a <MakeDoorStates+0x48>
 658:	22 0f       	add	r18, r18
 65a:	0a 94       	dec	r0
 65c:	ea f7       	brpl	.-6      	; 0x658 <MakeDoorStates+0x46>
 65e:	24 2b       	or	r18, r20
 660:	20 93 31 01 	sts	0x0131, r18	; 0x800131 <OpenDoors>
 664:	0d c0       	rjmp	.+26     	; 0x680 <MakeDoorStates+0x6e>
 666:	c7 01       	movw	r24, r14
 668:	00 2e       	mov	r0, r16
 66a:	01 c0       	rjmp	.+2      	; 0x66e <MakeDoorStates+0x5c>
 66c:	88 0f       	add	r24, r24
 66e:	0a 94       	dec	r0
 670:	ea f7       	brpl	.-6      	; 0x66c <MakeDoorStates+0x5a>
 672:	80 95       	com	r24
 674:	84 23       	and	r24, r20
 676:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <OpenDoors>
 67a:	02 c0       	rjmp	.+4      	; 0x680 <MakeDoorStates+0x6e>
 67c:	81 50       	subi	r24, 0x01	; 1
 67e:	89 83       	std	Y+1, r24	; 0x01
 680:	0f 5f       	subi	r16, 0xFF	; 255
 682:	1f 4f       	sbci	r17, 0xFF	; 255
 684:	22 96       	adiw	r28, 0x02	; 2
 686:	04 30       	cpi	r16, 0x04	; 4
 688:	11 05       	cpc	r17, r1
 68a:	89 f6       	brne	.-94     	; 0x62e <MakeDoorStates+0x1c>
 68c:	df 91       	pop	r29
 68e:	cf 91       	pop	r28
 690:	1f 91       	pop	r17
 692:	0f 91       	pop	r16
 694:	ff 90       	pop	r15
 696:	ef 90       	pop	r14
 698:	df 90       	pop	r13
 69a:	08 95       	ret

0000069c <ProcessMessage>:
 69c:	db 01       	movw	r26, r22
 69e:	82 30       	cpi	r24, 0x02	; 2
 6a0:	b1 f5       	brne	.+108    	; 0x70e <ProcessMessage+0x72>
 6a2:	8c 91       	ld	r24, X
 6a4:	98 2f       	mov	r25, r24
 6a6:	90 72       	andi	r25, 0x20	; 32
 6a8:	28 2f       	mov	r18, r24
 6aa:	20 76       	andi	r18, 0x60	; 96
 6ac:	d9 f1       	breq	.+118    	; 0x724 <ProcessMessage+0x88>
 6ae:	21 e0       	ldi	r18, 0x01	; 1
 6b0:	38 2f       	mov	r19, r24
 6b2:	30 71       	andi	r19, 0x10	; 16
 6b4:	84 ff       	sbrs	r24, 4
 6b6:	20 e0       	ldi	r18, 0x00	; 0
 6b8:	99 23       	and	r25, r25
 6ba:	11 f0       	breq	.+4      	; 0x6c0 <ProcessMessage+0x24>
 6bc:	94 e0       	ldi	r25, 0x04	; 4
 6be:	01 c0       	rjmp	.+2      	; 0x6c2 <ProcessMessage+0x26>
 6c0:	90 e0       	ldi	r25, 0x00	; 0
 6c2:	8f 70       	andi	r24, 0x0F	; 15
 6c4:	89 0f       	add	r24, r25
 6c6:	41 e0       	ldi	r20, 0x01	; 1
 6c8:	50 e0       	ldi	r21, 0x00	; 0
 6ca:	02 c0       	rjmp	.+4      	; 0x6d0 <ProcessMessage+0x34>
 6cc:	44 0f       	add	r20, r20
 6ce:	55 1f       	adc	r21, r21
 6d0:	8a 95       	dec	r24
 6d2:	e2 f7       	brpl	.-8      	; 0x6cc <ProcessMessage+0x30>
 6d4:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <ButtonState>
 6d8:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <ButtonState+0x1>
 6dc:	ba 01       	movw	r22, r20
 6de:	60 95       	com	r22
 6e0:	70 95       	com	r23
 6e2:	86 23       	and	r24, r22
 6e4:	97 23       	and	r25, r23
 6e6:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <ButtonState+0x1>
 6ea:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <ButtonState>
 6ee:	33 23       	and	r19, r19
 6f0:	51 f0       	breq	.+20     	; 0x706 <ProcessMessage+0x6a>
 6f2:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <ButtonState>
 6f6:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <ButtonState+0x1>
 6fa:	84 2b       	or	r24, r20
 6fc:	95 2b       	or	r25, r21
 6fe:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <ButtonState+0x1>
 702:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <ButtonState>
 706:	67 ec       	ldi	r22, 0xC7	; 199
 708:	81 e0       	ldi	r24, 0x01	; 1
 70a:	0c 94 ce 02 	jmp	0x59c	; 0x59c <SendEvent>
 70e:	83 30       	cpi	r24, 0x03	; 3
 710:	49 f4       	brne	.+18     	; 0x724 <ProcessMessage+0x88>
 712:	e0 91 35 01 	lds	r30, 0x0135	; 0x800135 <_testHandler>
 716:	f0 91 36 01 	lds	r31, 0x0136	; 0x800136 <_testHandler+0x1>
 71a:	30 97       	sbiw	r30, 0x00	; 0
 71c:	19 f0       	breq	.+6      	; 0x724 <ProcessMessage+0x88>
 71e:	64 2f       	mov	r22, r20
 720:	cd 01       	movw	r24, r26
 722:	09 94       	ijmp
 724:	08 95       	ret

00000726 <HandleMessage>:
 726:	90 91 ac 00 	lds	r25, 0x00AC	; 0x8000ac <msgType.1871>
 72a:	91 11       	cpse	r25, r1
 72c:	05 c0       	rjmp	.+10     	; 0x738 <HandleMessage+0x12>
 72e:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <msgType.1871>
 732:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <msgLen.1872>
 736:	08 95       	ret
 738:	40 91 ab 00 	lds	r20, 0x00AB	; 0x8000ab <msgLen.1872>
 73c:	41 11       	cpse	r20, r1
 73e:	04 c0       	rjmp	.+8      	; 0x748 <HandleMessage+0x22>
 740:	82 50       	subi	r24, 0x02	; 2
 742:	80 93 ab 00 	sts	0x00AB, r24	; 0x8000ab <msgLen.1872>
 746:	15 c0       	rjmp	.+42     	; 0x772 <HandleMessage+0x4c>
 748:	e0 91 aa 00 	lds	r30, 0x00AA	; 0x8000aa <bufferIndex.1870>
 74c:	e4 17       	cp	r30, r20
 74e:	98 f4       	brcc	.+38     	; 0x776 <HandleMessage+0x50>
 750:	21 e0       	ldi	r18, 0x01	; 1
 752:	2e 0f       	add	r18, r30
 754:	20 93 aa 00 	sts	0x00AA, r18	; 0x8000aa <bufferIndex.1870>
 758:	f0 e0       	ldi	r31, 0x00	; 0
 75a:	e4 56       	subi	r30, 0x64	; 100
 75c:	ff 4f       	sbci	r31, 0xFF	; 255
 75e:	80 83       	st	Z, r24
 760:	42 13       	cpse	r20, r18
 762:	09 c0       	rjmp	.+18     	; 0x776 <HandleMessage+0x50>
 764:	6c e9       	ldi	r22, 0x9C	; 156
 766:	70 e0       	ldi	r23, 0x00	; 0
 768:	89 2f       	mov	r24, r25
 76a:	0e 94 4e 03 	call	0x69c	; 0x69c <ProcessMessage>
 76e:	10 92 ac 00 	sts	0x00AC, r1	; 0x8000ac <msgType.1871>
 772:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <bufferIndex.1870>
 776:	08 95       	ret

00000778 <SetInputOutput>:
 778:	cf 93       	push	r28
 77a:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <outputRefreshCounter.1884>
 77e:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <outputRefreshCounter.1884+0x1>
 782:	01 96       	adiw	r24, 0x01	; 1
 784:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <outputRefreshCounter.1884+0x1>
 788:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <outputRefreshCounter.1884>
 78c:	83 70       	andi	r24, 0x03	; 3
 78e:	99 27       	eor	r25, r25
 790:	89 2b       	or	r24, r25
 792:	21 f5       	brne	.+72     	; 0x7dc <SetInputOutput+0x64>
 794:	80 91 99 00 	lds	r24, 0x0099	; 0x800099 <doorRefreshCounter.1885>
 798:	8f 5f       	subi	r24, 0xFF	; 255
 79a:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <doorRefreshCounter.1885>
 79e:	83 70       	andi	r24, 0x03	; 3
 7a0:	a8 2f       	mov	r26, r24
 7a2:	b0 e0       	ldi	r27, 0x00	; 0
 7a4:	aa 0f       	add	r26, r26
 7a6:	bb 1f       	adc	r27, r27
 7a8:	ac 58       	subi	r26, 0x8C	; 140
 7aa:	be 4f       	sbci	r27, 0xFE	; 254
 7ac:	11 96       	adiw	r26, 0x01	; 1
 7ae:	ec 91       	ld	r30, X
 7b0:	11 97       	sbiw	r26, 0x01	; 1
 7b2:	9c 91       	ld	r25, X
 7b4:	94 ff       	sbrs	r25, 4
 7b6:	03 c0       	rjmp	.+6      	; 0x7be <SetInputOutput+0x46>
 7b8:	94 e0       	ldi	r25, 0x04	; 4
 7ba:	9e 1b       	sub	r25, r30
 7bc:	e9 2f       	mov	r30, r25
 7be:	f0 e0       	ldi	r31, 0x00	; 0
 7c0:	ee 57       	subi	r30, 0x7E	; 126
 7c2:	ff 4f       	sbci	r31, 0xFF	; 255
 7c4:	21 e0       	ldi	r18, 0x01	; 1
 7c6:	30 e0       	ldi	r19, 0x00	; 0
 7c8:	a9 01       	movw	r20, r18
 7ca:	02 c0       	rjmp	.+4      	; 0x7d0 <SetInputOutput+0x58>
 7cc:	44 0f       	add	r20, r20
 7ce:	55 1f       	adc	r21, r21
 7d0:	8a 95       	dec	r24
 7d2:	e2 f7       	brpl	.-8      	; 0x7cc <SetInputOutput+0x54>
 7d4:	ca 01       	movw	r24, r20
 7d6:	90 81       	ld	r25, Z
 7d8:	89 2b       	or	r24, r25
 7da:	85 bb       	out	0x15, r24	; 21
 7dc:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <buttonRefreshCounter.1886>
 7e0:	8f 5f       	subi	r24, 0xFF	; 255
 7e2:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <buttonRefreshCounter.1886>
 7e6:	20 91 39 01 	lds	r18, 0x0139	; 0x800139 <displayCache>
 7ea:	22 23       	and	r18, r18
 7ec:	01 f1       	breq	.+64     	; 0x82e <SetInputOutput+0xb6>
 7ee:	83 70       	andi	r24, 0x03	; 3
 7f0:	62 2f       	mov	r22, r18
 7f2:	70 e0       	ldi	r23, 0x00	; 0
 7f4:	40 e1       	ldi	r20, 0x10	; 16
 7f6:	50 e0       	ldi	r21, 0x00	; 0
 7f8:	08 2e       	mov	r0, r24
 7fa:	02 c0       	rjmp	.+4      	; 0x800 <SetInputOutput+0x88>
 7fc:	44 0f       	add	r20, r20
 7fe:	55 1f       	adc	r21, r21
 800:	0a 94       	dec	r0
 802:	e2 f7       	brpl	.-8      	; 0x7fc <SetInputOutput+0x84>
 804:	46 23       	and	r20, r22
 806:	57 23       	and	r21, r23
 808:	45 2b       	or	r20, r21
 80a:	11 f0       	breq	.+4      	; 0x810 <SetInputOutput+0x98>
 80c:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <buttonLiftLed>
 810:	08 2e       	mov	r0, r24
 812:	02 c0       	rjmp	.+4      	; 0x818 <SetInputOutput+0xa0>
 814:	75 95       	asr	r23
 816:	67 95       	ror	r22
 818:	0a 94       	dec	r0
 81a:	e2 f7       	brpl	.-8      	; 0x814 <SetInputOutput+0x9c>
 81c:	60 fd       	sbrc	r22, 0
 81e:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <buttonFloorLed>
 822:	82 2f       	mov	r24, r18
 824:	80 7f       	andi	r24, 0xF0	; 240
 826:	19 f0       	breq	.+6      	; 0x82e <SetInputOutput+0xb6>
 828:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <buttonLiftLed_on>
 82c:	01 c0       	rjmp	.+2      	; 0x830 <SetInputOutput+0xb8>
 82e:	91 e0       	ldi	r25, 0x01	; 1
 830:	2f 70       	andi	r18, 0x0F	; 15
 832:	19 f0       	breq	.+6      	; 0x83a <SetInputOutput+0xc2>
 834:	20 91 3b 01 	lds	r18, 0x013B	; 0x80013b <buttonFloorLed_On>
 838:	01 c0       	rjmp	.+2      	; 0x83c <SetInputOutput+0xc4>
 83a:	21 e0       	ldi	r18, 0x01	; 1
 83c:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <liftPosDisplay_On>
 840:	81 11       	cpse	r24, r1
 842:	04 c0       	rjmp	.+8      	; 0x84c <SetInputOutput+0xd4>
 844:	30 91 7b 00 	lds	r19, 0x007B	; 0x80007b <Elevator>
 848:	3f 73       	andi	r19, 0x3F	; 63
 84a:	01 c0       	rjmp	.+2      	; 0x84e <SetInputOutput+0xd6>
 84c:	3f e3       	ldi	r19, 0x3F	; 63
 84e:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <liftDisplay7Seg_On>
 852:	81 11       	cpse	r24, r1
 854:	03 c0       	rjmp	.+6      	; 0x85c <SetInputOutput+0xe4>
 856:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <liftDisplay7Seg>
 85a:	01 c0       	rjmp	.+2      	; 0x85e <SetInputOutput+0xe6>
 85c:	87 e0       	ldi	r24, 0x07	; 7
 85e:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <floorDisplayPort>
 862:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <doorframe>
 866:	60 e4       	ldi	r22, 0x40	; 64
 868:	86 9f       	mul	r24, r22
 86a:	a0 01       	movw	r20, r0
 86c:	11 24       	eor	r1, r1
 86e:	60 e8       	ldi	r22, 0x80	; 128
 870:	96 9f       	mul	r25, r22
 872:	c0 01       	movw	r24, r0
 874:	11 24       	eor	r1, r1
 876:	84 2b       	or	r24, r20
 878:	83 2b       	or	r24, r19
 87a:	88 bb       	out	0x18, r24	; 24
 87c:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <buttonLiftLed>
 880:	98 e0       	ldi	r25, 0x08	; 8
 882:	89 9f       	mul	r24, r25
 884:	a0 01       	movw	r20, r0
 886:	11 24       	eor	r1, r1
 888:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <buttonFloorLed>
 88c:	30 e2       	ldi	r19, 0x20	; 32
 88e:	93 9f       	mul	r25, r19
 890:	c0 01       	movw	r24, r0
 892:	11 24       	eor	r1, r1
 894:	84 2b       	or	r24, r20
 896:	30 91 3e 01 	lds	r19, 0x013E	; 0x80013e <floorDisplayPort>
 89a:	38 2b       	or	r19, r24
 89c:	40 e8       	ldi	r20, 0x80	; 128
 89e:	24 9f       	mul	r18, r20
 8a0:	c0 01       	movw	r24, r0
 8a2:	11 24       	eor	r1, r1
 8a4:	83 2b       	or	r24, r19
 8a6:	8b bb       	out	0x1b, r24	; 27
 8a8:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <USART_rxBufferOut>
 8ac:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <USART_rxBufferIn>
 8b0:	98 17       	cp	r25, r24
 8b2:	b9 f0       	breq	.+46     	; 0x8e2 <__stack+0x83>
 8b4:	0e 94 ce 01 	call	0x39c	; 0x39c <EnterAtomic>
 8b8:	e0 91 52 01 	lds	r30, 0x0152	; 0x800152 <USART_rxBufferOut>
 8bc:	81 e0       	ldi	r24, 0x01	; 1
 8be:	8e 0f       	add	r24, r30
 8c0:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <USART_rxBufferOut>
 8c4:	f0 e0       	ldi	r31, 0x00	; 0
 8c6:	ec 5a       	subi	r30, 0xAC	; 172
 8c8:	fe 4f       	sbci	r31, 0xFE	; 254
 8ca:	c0 81       	ld	r28, Z
 8cc:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <USART_rxBufferOut>
 8d0:	8f 71       	andi	r24, 0x1F	; 31
 8d2:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <USART_rxBufferOut>
 8d6:	0e 94 d5 01 	call	0x3aa	; 0x3aa <LeaveAtomic>
 8da:	8c 2f       	mov	r24, r28
 8dc:	0e 94 93 03 	call	0x726	; 0x726 <HandleMessage>
 8e0:	e3 cf       	rjmp	.-58     	; 0x8a8 <__stack+0x49>
 8e2:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <terminalRefreshCounter.1887>
 8e6:	90 91 97 00 	lds	r25, 0x0097	; 0x800097 <terminalRefreshCounter.1887+0x1>
 8ea:	9c 01       	movw	r18, r24
 8ec:	2f 5f       	subi	r18, 0xFF	; 255
 8ee:	3f 4f       	sbci	r19, 0xFF	; 255
 8f0:	30 93 97 00 	sts	0x0097, r19	; 0x800097 <terminalRefreshCounter.1887+0x1>
 8f4:	20 93 96 00 	sts	0x0096, r18	; 0x800096 <terminalRefreshCounter.1887>
 8f8:	8f 3f       	cpi	r24, 0xFF	; 255
 8fa:	9f 40       	sbci	r25, 0x0F	; 15
 8fc:	c9 f4       	brne	.+50     	; 0x930 <__stack+0xd1>
 8fe:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <EnableStatusUpdate>
 902:	88 23       	and	r24, r24
 904:	a9 f0       	breq	.+42     	; 0x930 <__stack+0xd1>
 906:	84 e0       	ldi	r24, 0x04	; 4
 908:	0e 94 ca 02 	call	0x594	; 0x594 <Usart_PutChar>
 90c:	86 e0       	ldi	r24, 0x06	; 6
 90e:	0e 94 ca 02 	call	0x594	; 0x594 <Usart_PutChar>
 912:	85 ea       	ldi	r24, 0xA5	; 165
 914:	0e 94 ca 02 	call	0x594	; 0x594 <Usart_PutChar>
 918:	8a e5       	ldi	r24, 0x5A	; 90
 91a:	0e 94 ca 02 	call	0x594	; 0x594 <Usart_PutChar>
 91e:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <SystemState>
 922:	0e 94 ca 02 	call	0x594	; 0x594 <Usart_PutChar>
 926:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <OpenDoors>
 92a:	cf 91       	pop	r28
 92c:	0c 94 ca 02 	jmp	0x594	; 0x594 <Usart_PutChar>
 930:	cf 91       	pop	r28
 932:	08 95       	ret

00000934 <InitializeStart>:
 934:	8a ec       	ldi	r24, 0xCA	; 202
 936:	0e 94 ca 02 	call	0x594	; 0x594 <Usart_PutChar>
 93a:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <liftPosDisplay_On>
 93e:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <buttonLiftLed_on>
 942:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <liftDisplay7Seg_On>
 946:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <buttonFloorLed_On>
 94a:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <doorframe>
 94e:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <liftDoorState+0x1>
 952:	80 e2       	ldi	r24, 0x20	; 32
 954:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <liftDoorState>
 958:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <liftDoorState+0x3>
 95c:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <liftDoorState+0x2>
 960:	10 92 79 01 	sts	0x0179, r1	; 0x800179 <liftDoorState+0x5>
 964:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <liftDoorState+0x4>
 968:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <liftDoorState+0x7>
 96c:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <liftDoorState+0x6>
 970:	8f e1       	ldi	r24, 0x1F	; 31
 972:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <Elevator>
 976:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <Elevator+0x1>
 97a:	0e 94 3e 02 	call	0x47c	; 0x47c <InitializeCounter>
 97e:	20 e0       	ldi	r18, 0x00	; 0
 980:	40 e0       	ldi	r20, 0x00	; 0
 982:	61 ec       	ldi	r22, 0xC1	; 193
 984:	81 e0       	ldi	r24, 0x01	; 1
 986:	0e 94 ce 02 	call	0x59c	; 0x59c <SendEvent>
 98a:	8e ef       	ldi	r24, 0xFE	; 254
 98c:	0e 94 ca 02 	call	0x594	; 0x594 <Usart_PutChar>
 990:	0e 94 03 02 	call	0x406	; 0x406 <DispatchEvent>
 994:	0e 94 bc 03 	call	0x778	; 0x778 <SetInputOutput>
 998:	fb cf       	rjmp	.-10     	; 0x990 <InitializeStart+0x5c>

0000099a <__vector_1>:
 99a:	1f 92       	push	r1
 99c:	0f 92       	push	r0
 99e:	0f b6       	in	r0, 0x3f	; 63
 9a0:	0f 92       	push	r0
 9a2:	11 24       	eor	r1, r1
 9a4:	2f 93       	push	r18
 9a6:	3f 93       	push	r19
 9a8:	4f 93       	push	r20
 9aa:	5f 93       	push	r21
 9ac:	6f 93       	push	r22
 9ae:	7f 93       	push	r23
 9b0:	8f 93       	push	r24
 9b2:	9f 93       	push	r25
 9b4:	af 93       	push	r26
 9b6:	bf 93       	push	r27
 9b8:	ef 93       	push	r30
 9ba:	ff 93       	push	r31
 9bc:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <ButtonState>
 9c0:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <ButtonState+0x1>
 9c4:	91 60       	ori	r25, 0x01	; 1
 9c6:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <ButtonState+0x1>
 9ca:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <ButtonState>
 9ce:	40 91 33 01 	lds	r20, 0x0133	; 0x800133 <ButtonState>
 9d2:	50 91 34 01 	lds	r21, 0x0134	; 0x800134 <ButtonState+0x1>
 9d6:	20 e0       	ldi	r18, 0x00	; 0
 9d8:	69 ec       	ldi	r22, 0xC9	; 201
 9da:	80 e1       	ldi	r24, 0x10	; 16
 9dc:	0e 94 ce 02 	call	0x59c	; 0x59c <SendEvent>
 9e0:	ff 91       	pop	r31
 9e2:	ef 91       	pop	r30
 9e4:	bf 91       	pop	r27
 9e6:	af 91       	pop	r26
 9e8:	9f 91       	pop	r25
 9ea:	8f 91       	pop	r24
 9ec:	7f 91       	pop	r23
 9ee:	6f 91       	pop	r22
 9f0:	5f 91       	pop	r21
 9f2:	4f 91       	pop	r20
 9f4:	3f 91       	pop	r19
 9f6:	2f 91       	pop	r18
 9f8:	0f 90       	pop	r0
 9fa:	0f be       	out	0x3f, r0	; 63
 9fc:	0f 90       	pop	r0
 9fe:	1f 90       	pop	r1
 a00:	18 95       	reti

00000a02 <__vector_13>:
 a02:	1f 92       	push	r1
 a04:	0f 92       	push	r0
 a06:	0f b6       	in	r0, 0x3f	; 63
 a08:	0f 92       	push	r0
 a0a:	11 24       	eor	r1, r1
 a0c:	2f 93       	push	r18
 a0e:	3f 93       	push	r19
 a10:	8f 93       	push	r24
 a12:	9f 93       	push	r25
 a14:	ef 93       	push	r30
 a16:	ff 93       	push	r31
 a18:	5f 9b       	sbis	0x0b, 7	; 11
 a1a:	1e c0       	rjmp	.+60     	; 0xa58 <__vector_13+0x56>
 a1c:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <USART_rxBufferIn>
 a20:	20 91 52 01 	lds	r18, 0x0152	; 0x800152 <USART_rxBufferOut>
 a24:	90 e0       	ldi	r25, 0x00	; 0
 a26:	01 96       	adiw	r24, 0x01	; 1
 a28:	8f 71       	andi	r24, 0x1F	; 31
 a2a:	99 27       	eor	r25, r25
 a2c:	30 e0       	ldi	r19, 0x00	; 0
 a2e:	82 17       	cp	r24, r18
 a30:	93 07       	cpc	r25, r19
 a32:	89 f0       	breq	.+34     	; 0xa56 <__vector_13+0x54>
 a34:	8c b1       	in	r24, 0x0c	; 12
 a36:	e0 91 53 01 	lds	r30, 0x0153	; 0x800153 <USART_rxBufferIn>
 a3a:	91 e0       	ldi	r25, 0x01	; 1
 a3c:	9e 0f       	add	r25, r30
 a3e:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <USART_rxBufferIn>
 a42:	f0 e0       	ldi	r31, 0x00	; 0
 a44:	ec 5a       	subi	r30, 0xAC	; 172
 a46:	fe 4f       	sbci	r31, 0xFE	; 254
 a48:	80 83       	st	Z, r24
 a4a:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <USART_rxBufferIn>
 a4e:	8f 71       	andi	r24, 0x1F	; 31
 a50:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <USART_rxBufferIn>
 a54:	e1 cf       	rjmp	.-62     	; 0xa18 <__vector_13+0x16>
 a56:	57 98       	cbi	0x0a, 7	; 10
 a58:	ff 91       	pop	r31
 a5a:	ef 91       	pop	r30
 a5c:	9f 91       	pop	r25
 a5e:	8f 91       	pop	r24
 a60:	3f 91       	pop	r19
 a62:	2f 91       	pop	r18
 a64:	0f 90       	pop	r0
 a66:	0f be       	out	0x3f, r0	; 63
 a68:	0f 90       	pop	r0
 a6a:	1f 90       	pop	r1
 a6c:	18 95       	reti

00000a6e <__vector_7>:
 a6e:	1f 92       	push	r1
 a70:	0f 92       	push	r0
 a72:	0f b6       	in	r0, 0x3f	; 63
 a74:	0f 92       	push	r0
 a76:	11 24       	eor	r1, r1
 a78:	2f 93       	push	r18
 a7a:	3f 93       	push	r19
 a7c:	4f 93       	push	r20
 a7e:	5f 93       	push	r21
 a80:	6f 93       	push	r22
 a82:	7f 93       	push	r23
 a84:	8f 93       	push	r24
 a86:	9f 93       	push	r25
 a88:	af 93       	push	r26
 a8a:	bf 93       	push	r27
 a8c:	ef 93       	push	r30
 a8e:	ff 93       	push	r31
 a90:	80 91 95 00 	lds	r24, 0x0095	; 0x800095 <ElevatorTick.1962>
 a94:	8f 5f       	subi	r24, 0xFF	; 255
 a96:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <ElevatorTick.1962>
 a9a:	90 91 94 00 	lds	r25, 0x0094	; 0x800094 <__data_end>
 a9e:	9f 5f       	subi	r25, 0xFF	; 255
 aa0:	90 93 94 00 	sts	0x0094, r25	; 0x800094 <__data_end>
 aa4:	60 91 7d 00 	lds	r22, 0x007D	; 0x80007d <Elevator+0x2>
 aa8:	0e 94 20 06 	call	0xc40	; 0xc40 <__udivmodqi4>
 aac:	91 11       	cpse	r25, r1
 aae:	14 c0       	rjmp	.+40     	; 0xad8 <__vector_7+0x6a>
 ab0:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <Elevator>
 ab4:	60 91 7c 00 	lds	r22, 0x007C	; 0x80007c <Elevator+0x1>
 ab8:	96 17       	cp	r25, r22
 aba:	61 f0       	breq	.+24     	; 0xad4 <__vector_7+0x66>
 abc:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <Elevator+0x4>
 ac0:	89 0f       	add	r24, r25
 ac2:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <Elevator>
 ac6:	e0 91 80 00 	lds	r30, 0x0080	; 0x800080 <Elevator+0x5>
 aca:	f0 91 81 00 	lds	r31, 0x0081	; 0x800081 <Elevator+0x6>
 ace:	30 97       	sbiw	r30, 0x00	; 0
 ad0:	09 f0       	breq	.+2      	; 0xad4 <__vector_7+0x66>
 ad2:	09 95       	icall
 ad4:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <ElevatorTick.1962>
 ad8:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__data_end>
 adc:	6c e0       	ldi	r22, 0x0C	; 12
 ade:	0e 94 20 06 	call	0xc40	; 0xc40 <__udivmodqi4>
 ae2:	91 11       	cpse	r25, r1
 ae4:	04 c0       	rjmp	.+8      	; 0xaee <__vector_7+0x80>
 ae6:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__data_end>
 aea:	0e 94 09 03 	call	0x612	; 0x612 <MakeDoorStates>
 aee:	ff 91       	pop	r31
 af0:	ef 91       	pop	r30
 af2:	bf 91       	pop	r27
 af4:	af 91       	pop	r26
 af6:	9f 91       	pop	r25
 af8:	8f 91       	pop	r24
 afa:	7f 91       	pop	r23
 afc:	6f 91       	pop	r22
 afe:	5f 91       	pop	r21
 b00:	4f 91       	pop	r20
 b02:	3f 91       	pop	r19
 b04:	2f 91       	pop	r18
 b06:	0f 90       	pop	r0
 b08:	0f be       	out	0x3f, r0	; 63
 b0a:	0f 90       	pop	r0
 b0c:	1f 90       	pop	r1
 b0e:	18 95       	reti

00000b10 <StartTimer>:
 b10:	ff 92       	push	r15
 b12:	0f 93       	push	r16
 b14:	1f 93       	push	r17
 b16:	cf 93       	push	r28
 b18:	df 93       	push	r29
 b1a:	f0 90 51 01 	lds	r15, 0x0151	; 0x800151 <UsedTimers>
 b1e:	2f 2d       	mov	r18, r15
 b20:	30 e0       	ldi	r19, 0x00	; 0
 b22:	c0 e0       	ldi	r28, 0x00	; 0
 b24:	d0 e0       	ldi	r29, 0x00	; 0
 b26:	a9 01       	movw	r20, r18
 b28:	0c 2e       	mov	r0, r28
 b2a:	02 c0       	rjmp	.+4      	; 0xb30 <StartTimer+0x20>
 b2c:	55 95       	asr	r21
 b2e:	47 95       	ror	r20
 b30:	0a 94       	dec	r0
 b32:	e2 f7       	brpl	.-8      	; 0xb2c <StartTimer+0x1c>
 b34:	40 fd       	sbrc	r20, 0
 b36:	18 c0       	rjmp	.+48     	; 0xb68 <StartTimer+0x58>
 b38:	8c 01       	movw	r16, r24
 b3a:	0e 94 ce 01 	call	0x39c	; 0x39c <EnterAtomic>
 b3e:	21 e0       	ldi	r18, 0x01	; 1
 b40:	30 e0       	ldi	r19, 0x00	; 0
 b42:	0c 2e       	mov	r0, r28
 b44:	01 c0       	rjmp	.+2      	; 0xb48 <StartTimer+0x38>
 b46:	22 0f       	add	r18, r18
 b48:	0a 94       	dec	r0
 b4a:	ea f7       	brpl	.-6      	; 0xb46 <StartTimer+0x36>
 b4c:	2f 29       	or	r18, r15
 b4e:	20 93 51 01 	sts	0x0151, r18	; 0x800151 <UsedTimers>
 b52:	fe 01       	movw	r30, r28
 b54:	ee 0f       	add	r30, r30
 b56:	ff 1f       	adc	r31, r31
 b58:	ef 5b       	subi	r30, 0xBF	; 191
 b5a:	fe 4f       	sbci	r31, 0xFE	; 254
 b5c:	11 83       	std	Z+1, r17	; 0x01
 b5e:	00 83       	st	Z, r16
 b60:	0e 94 d5 01 	call	0x3aa	; 0x3aa <LeaveAtomic>
 b64:	8c 2f       	mov	r24, r28
 b66:	05 c0       	rjmp	.+10     	; 0xb72 <StartTimer+0x62>
 b68:	21 96       	adiw	r28, 0x01	; 1
 b6a:	c8 30       	cpi	r28, 0x08	; 8
 b6c:	d1 05       	cpc	r29, r1
 b6e:	d9 f6       	brne	.-74     	; 0xb26 <StartTimer+0x16>
 b70:	8f ef       	ldi	r24, 0xFF	; 255
 b72:	df 91       	pop	r29
 b74:	cf 91       	pop	r28
 b76:	1f 91       	pop	r17
 b78:	0f 91       	pop	r16
 b7a:	ff 90       	pop	r15
 b7c:	08 95       	ret

00000b7e <__vector_10>:
 b7e:	1f 92       	push	r1
 b80:	0f 92       	push	r0
 b82:	0f b6       	in	r0, 0x3f	; 63
 b84:	0f 92       	push	r0
 b86:	11 24       	eor	r1, r1
 b88:	cf 92       	push	r12
 b8a:	df 92       	push	r13
 b8c:	ff 92       	push	r15
 b8e:	0f 93       	push	r16
 b90:	1f 93       	push	r17
 b92:	2f 93       	push	r18
 b94:	3f 93       	push	r19
 b96:	4f 93       	push	r20
 b98:	5f 93       	push	r21
 b9a:	6f 93       	push	r22
 b9c:	7f 93       	push	r23
 b9e:	8f 93       	push	r24
 ba0:	9f 93       	push	r25
 ba2:	af 93       	push	r26
 ba4:	bf 93       	push	r27
 ba6:	cf 93       	push	r28
 ba8:	df 93       	push	r29
 baa:	ef 93       	push	r30
 bac:	ff 93       	push	r31
 bae:	01 e4       	ldi	r16, 0x41	; 65
 bb0:	11 e0       	ldi	r17, 0x01	; 1
 bb2:	c0 e0       	ldi	r28, 0x00	; 0
 bb4:	d0 e0       	ldi	r29, 0x00	; 0
 bb6:	cc 24       	eor	r12, r12
 bb8:	c3 94       	inc	r12
 bba:	d1 2c       	mov	r13, r1
 bbc:	f0 90 51 01 	lds	r15, 0x0151	; 0x800151 <UsedTimers>
 bc0:	8f 2d       	mov	r24, r15
 bc2:	90 e0       	ldi	r25, 0x00	; 0
 bc4:	0c 2e       	mov	r0, r28
 bc6:	02 c0       	rjmp	.+4      	; 0xbcc <__vector_10+0x4e>
 bc8:	95 95       	asr	r25
 bca:	87 95       	ror	r24
 bcc:	0a 94       	dec	r0
 bce:	e2 f7       	brpl	.-8      	; 0xbc8 <__vector_10+0x4a>
 bd0:	80 ff       	sbrs	r24, 0
 bd2:	18 c0       	rjmp	.+48     	; 0xc04 <__vector_10+0x86>
 bd4:	f8 01       	movw	r30, r16
 bd6:	80 81       	ld	r24, Z
 bd8:	91 81       	ldd	r25, Z+1	; 0x01
 bda:	01 97       	sbiw	r24, 0x01	; 1
 bdc:	91 83       	std	Z+1, r25	; 0x01
 bde:	80 83       	st	Z, r24
 be0:	89 2b       	or	r24, r25
 be2:	81 f4       	brne	.+32     	; 0xc04 <__vector_10+0x86>
 be4:	20 e0       	ldi	r18, 0x00	; 0
 be6:	40 e0       	ldi	r20, 0x00	; 0
 be8:	68 ec       	ldi	r22, 0xC8	; 200
 bea:	81 e0       	ldi	r24, 0x01	; 1
 bec:	0e 94 ce 02 	call	0x59c	; 0x59c <SendEvent>
 bf0:	c6 01       	movw	r24, r12
 bf2:	0c 2e       	mov	r0, r28
 bf4:	01 c0       	rjmp	.+2      	; 0xbf8 <__vector_10+0x7a>
 bf6:	88 0f       	add	r24, r24
 bf8:	0a 94       	dec	r0
 bfa:	ea f7       	brpl	.-6      	; 0xbf6 <__vector_10+0x78>
 bfc:	80 95       	com	r24
 bfe:	f8 22       	and	r15, r24
 c00:	f0 92 51 01 	sts	0x0151, r15	; 0x800151 <UsedTimers>
 c04:	21 96       	adiw	r28, 0x01	; 1
 c06:	0e 5f       	subi	r16, 0xFE	; 254
 c08:	1f 4f       	sbci	r17, 0xFF	; 255
 c0a:	c8 30       	cpi	r28, 0x08	; 8
 c0c:	d1 05       	cpc	r29, r1
 c0e:	b1 f6       	brne	.-84     	; 0xbbc <__vector_10+0x3e>
 c10:	ff 91       	pop	r31
 c12:	ef 91       	pop	r30
 c14:	df 91       	pop	r29
 c16:	cf 91       	pop	r28
 c18:	bf 91       	pop	r27
 c1a:	af 91       	pop	r26
 c1c:	9f 91       	pop	r25
 c1e:	8f 91       	pop	r24
 c20:	7f 91       	pop	r23
 c22:	6f 91       	pop	r22
 c24:	5f 91       	pop	r21
 c26:	4f 91       	pop	r20
 c28:	3f 91       	pop	r19
 c2a:	2f 91       	pop	r18
 c2c:	1f 91       	pop	r17
 c2e:	0f 91       	pop	r16
 c30:	ff 90       	pop	r15
 c32:	df 90       	pop	r13
 c34:	cf 90       	pop	r12
 c36:	0f 90       	pop	r0
 c38:	0f be       	out	0x3f, r0	; 63
 c3a:	0f 90       	pop	r0
 c3c:	1f 90       	pop	r1
 c3e:	18 95       	reti

00000c40 <__udivmodqi4>:
 c40:	99 1b       	sub	r25, r25
 c42:	79 e0       	ldi	r23, 0x09	; 9
 c44:	04 c0       	rjmp	.+8      	; 0xc4e <__udivmodqi4_ep>

00000c46 <__udivmodqi4_loop>:
 c46:	99 1f       	adc	r25, r25
 c48:	96 17       	cp	r25, r22
 c4a:	08 f0       	brcs	.+2      	; 0xc4e <__udivmodqi4_ep>
 c4c:	96 1b       	sub	r25, r22

00000c4e <__udivmodqi4_ep>:
 c4e:	88 1f       	adc	r24, r24
 c50:	7a 95       	dec	r23
 c52:	c9 f7       	brne	.-14     	; 0xc46 <__udivmodqi4_loop>
 c54:	80 95       	com	r24
 c56:	08 95       	ret

00000c58 <_exit>:
 c58:	f8 94       	cli

00000c5a <__stop_program>:
 c5a:	ff cf       	rjmp	.-2      	; 0xc5a <__stop_program>
